{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#connor-cruz-fab-academy-site","title":"Connor Cruz Fab Academy Site","text":"<p>This is my Fab Academy site. You can navigate the site using the navigation bar on the side.</p>"},{"location":"#final-project-slide-and-video","title":"Final Project Slide and Video","text":"<p> The video is not supported in your browser. <p></p>"},{"location":"about/","title":"About Me","text":"<p>Hello. I am Connor Cruz! I am a sophomore at Charlotte Latin School, and this is my Fab Academy Documentation. I grew up in Charlotte, North Carolina, but my family and I are from Guam.</p> <p>Some of my interests include coding and learning mathematics in my free time. For coding, I have learnt several languages (some being C++, Java, Python, and JS). I\u2019ve also developed some games using game engines such as Unity and Godot. In terms of math, I enjoy learning many different subjects and am currently researching Godel\u2019s Incompleteness Theorems in depth. I am a big fan of set theory, and specifically abstract algebra, but I also enjoy learning topics in the realm of Analysis.</p> <p>I have always been fascinated about how things work in the world, so I hope that Fab Academy can broaden my understanding.</p>"},{"location":"about/agreement/","title":"Fab Academy Student Agreement","text":"<p>The Fab Academy is responsible for:</p> <ul> <li>Teaching principles and practices of digital fabrication</li> <li>Arranging lectures, recitations, meetings, and events for the class</li> <li>Evaluating and providing feedback on student work</li> <li>Offering clear standards for completing assignments</li> <li>Certifying and archiving student progress</li> <li>Supervising class preparation</li> <li>Reviewing prospective students, instructors, and labs</li> <li>Providing central staff and infrastructure for students, instructors, and labs</li> <li>Fund-raising for costs not covered by student tuition</li> <li>Managing and reporting on the program\u2019s finances, results, and impacts</li> <li>Publicizing the program</li> <li>Promoting a respectful environment free of harassment and discrimination</li> <li>Encourage a diverse, accessible, and equitable community</li> </ul> <p>I am a Fab Academy student, responsible for:</p> <ul> <li>Attending class lectures and participating in reviews</li> <li>Developing and documenting projects assigned to introduce and demonstrate skills</li> <li>Allowing the Fab Academy to share my work (with attribution) in the class for purposes compatible with its mission</li> <li>Honestly reporting on my work, and appropriately attributing the work of others (both human and machine)</li> <li>Working safely</li> <li>Leaving workspaces in the same (or better) condition than I found them</li> <li>Participating in the upkeep of my lab</li> <li>Ensuring that my tuition for local and central class costs is covered</li> <li>Following locally applicable health and safety guidance</li> <li>Promoting a respectful environment free of harassment and discrimination</li> </ul> <p>Signed by committing this file in my repository,</p> <p>Connor Cruz</p>"},{"location":"assignments/week01/","title":"1. Principles and Practices","text":"<p>This week I worked on defining my final project idea and started to getting used to the documentation process.</p>"},{"location":"assignments/week01/#git-and-gitlab-setup","title":"Git and Gitlab Setup","text":""},{"location":"assignments/week01/#git-download-and-ssh-connection","title":"Git Download and SSH Connection","text":"<p>To access my repos from my laptop, I downloaded the latest version of Git from this link for Windows OS.</p> <p>Once downloaded, I used Git Bash to generate an SSH key using this guide. After changing the directory to .ssh, I entered the following code: <code>$ ssh-keygen -o</code></p> <p>I entered a file name and password, and I accessed the key by using <code>$ cat [INSERT KEY FILE NAME]</code> I copied and pasted the key to my GitLab profile to allow me to push changes from my laptop.</p> <p>Here is the SSH key after being added to Gitlab (censored for privacy). </p>"},{"location":"assignments/week01/#copying-the-repo-to-my-computer","title":"Copying the Repo to My Computer","text":"<p>To copy the site repo, I went to its location on Gitlab, and went to Code -&gt; Clone with HTTPS. In the bash terminal I changed the directory to my Fab Academy directory and typed <code>$ git clone https://gitlab.fabcloud.org/academany/fabacademy/2024/labs/charlotte/students/connor-cruz.git</code>, which copied its files to that location.</p> <p>After selecting Code, this is the menu that pops up. </p>"},{"location":"assignments/week01/#modifying-the-repo-with-vscode","title":"Modifying the Repo with VSCode","text":"<p>I already had VSCode installed beforehand, but it can be installed for Windows here. I opened the directory storing my repository files and edited some of the text in index.html.</p>"},{"location":"assignments/week01/#staging-committing-and-pushing-commits","title":"Staging, Committing, and Pushing Commits","text":"<p>Once I was done with the changes, I used bash to add, commit, and push them. I set up all of the files for staging and committed the changes using:</p> <pre><code>$ git add --all\n$ git commit -m \"Test commit\"\n</code></pre> <p>To push the changes to my Gitlab page, I used:</p> <pre><code>$ git push\n</code></pre>"},{"location":"assignments/week01/#implementing-mkdocs","title":"Implementing MKDocs","text":"<p>Note: I used the official MKDocs installation guide to help with my installation.</p>"},{"location":"assignments/week01/#python-and-pip-installs","title":"Python and PIP Installs","text":"<p>To download MKDocs, I first needed to install Python and PIP. I downloaded Python for Windows directly from the Python website.</p> <p>Next, I used <code>$ python get-pip.py</code> in Bash to install PIP.</p>"},{"location":"assignments/week01/#mkdocs-install","title":"MKDocs Install","text":"<p>To install MKDocs, I orginally tried using the command <code>$ pip install mkdocs</code>, but it resulted in the following error: </p> <p>I looked the problem up online, and I realized that I needed to set Python as an environmental variable. I attempted to set one to its path, but this still didn\u2019t work. Eventually, I figured out that I could simply insert python -m before my commands, and it would work.</p> <p>MKDocs was installed through PIP with the following command:</p> <pre><code>$ python -m pip install mkdocs\n</code></pre>"},{"location":"assignments/week01/#adding-mkdocs-to-site-repo","title":"Adding MKDocs to Site Repo","text":"<p>For my site, I used the Fab Academy Student Template.</p> <p>I then copied the following files to my repo: mkdocs.yml, requirements.txt, .gitlab-ci.yml. I also copied the docs folder over.</p> <p>Note: I needed to replace my default gitlab-ci.yml file with the template file.</p>"},{"location":"assignments/week01/#modifying-with-vscode","title":"Modifying with VSCode","text":"<p>The template was already provided with .md files, which were successfully able to modified through VSCode. I finished by personalizing the mkdocs YAML and the index pages.</p> <p>Here is my webpage after adding and personalizing the template. </p>"},{"location":"assignments/week01/#attempting-to-add-cinder-theme","title":"Attempting to Add Cinder Theme","text":"<p>I tried to add a new theme to the site called Cinder.</p> <p>At first, I simply replaced the theme in the MKDocs YAML file with \u2018Cinder\u2019, but I accidentally forgot to add the cinder files to my repo. I followed the install guide on the official Cinder demo website, and I eventually got the theme to work.</p> <p>I ultimately decided not to use the theme because of the dropdown menus which come from the navigation bar (some went off of the page). I reverted the site back to its default theme afterwards.</p>"},{"location":"assignments/week01/#adding-windmill-theme","title":"Adding Windmill Theme","text":"<p>The next theme that I tried to add was Windmill.</p> <p>I downloaded the mkdocs_windmill directory from the sample page, and I pasted it into my repo after creating a new branch for testing.</p> <p>I also changed the value of name in the MKDocs YAML to null and changed custom_dir to mkdocs_windmill.</p> <p>Initially, my push resulted in an error due to forgetting to save the YAML file, but it was fixed afterwards. For some reason, the formatting of the page was not working despite looking fine when using <code>$ py -m mkdocs serve</code> locally.</p> <p>MKDocs Serve Command: </p> <p>Error with Cinder formatting: </p> <p>I tried deleting and adding the mkdocs_windmill directory back into my repo, and I pushed again. For some reason, the website now looked as intended. I do not know why this method of fixing it worked, but I suspect that it was due to me accidentally changing a file in mkdocs_windmill and forgetting to change it back. Once the change was successful, I merged the branch.</p> <p>Here are some images of the site after the theme change.  </p>"},{"location":"assignments/week01/#final-project-planning","title":"Final Project Planning","text":""},{"location":"assignments/week01/#overview","title":"Overview","text":"<p>My final project idea is designed to help teach the culture of my home island, Guam, to those who do not know as much about it.</p> <p>The project consists of a board (roughly 2\u2019 x 1.5\u2019) that has an OLED screen along with a map of Guam. To accompany the board, there will also be a piece similar to a chess pawn.</p> <p>The island of Guam will have sensors at cultural landmarks, and when the pawn piece is placed on those sensors, there will be a two-way response. The sensor on the board will control the screen and cause it to show an image or images related to the location and providing information. The pawn-like piece will also have a sensor that, when triggered, will output an audio recording to go along with the information on the board.</p> <p>Here is a very rough picture representing the basic layout of the board and piece.</p> <p></p>"},{"location":"assignments/week01/#similar-project","title":"Similar Project","text":"<p>Mr. Dubick recommended a similar final project made by Elaine Liu. Her project can be found here.</p> <p>Her project consisted of a map of the world with sensors. When the sensors are touched, media relating to that place is shown on a screen. Since the project is very similar to mine, I will most likely reference hers throughout my development.</p>"},{"location":"assignments/week01/#planned-use-of-weeks","title":"Planned Use of Weeks","text":"<p>Once I talked to Dr. Taylor about my project idea, we were able to form a rough plan of weeks I could use to develop my project:</p> <ul> <li>Cad Week (Week 2) - creating the general design and dimensions</li> <li>Computer Controlled Cutting (Week 3) - laser cut parts for cable management</li> <li>Electronics Production (Week 4) - create sensors, triggers, and screen piece</li> <li>3D Scanning and Printing (Week 5) - create holders for screen and sensors; possibly also use for piece design</li> <li>Embedded Programming (Week 6) - program microcontroller to control screen and audio</li> <li>Computer-Controlled Machining (Week 7) - designing the general box</li> <li>Electronics Design (Week 8) - continue to design sensors and screen components</li> <li>Output Devices (Week 9) - programming screen and speakers for audio</li> <li>Input Devices (Week 11) - making sensors on the board respond with the piece</li> <li>Molding and Casting (Week 12) - creating rubber feet for the board</li> </ul>"},{"location":"assignments/week01/#reflection","title":"Reflection","text":"<p>This week, I learned how to use Git and Gitlab, as well as how to include Markdown as part of repositories. I also learned how to customize the Markdown theme and edit files in directories easily with VSCode. I also got accustomed to using my computer\u2019s command line, Git Bash, and PowerShell to navigate directories and run commands. I also had an opportunity to think about my final project, and I feel like I have a fairly good idea of how I can apportion my weeks to work on it. Overall, I felt that I did not have many problems this week.</p>"},{"location":"assignments/week01/#credits","title":"Credits","text":"<p>Thank you to Adam Stone for his image compressor. It is very simple and efficient. Also thanks to Mr. Dubick and Dr. Taylor for helping me figure out my final project.</p>"},{"location":"assignments/week02/","title":"2. Computer Aided Design","text":"<p>This week I worked on using different CAD programs to model my final project and deciding which would be best to use in the long term.</p> <p>You can find the files used this week here.</p>"},{"location":"assignments/week02/#piece-modeled","title":"Piece Modeled","text":"<p>I chose to model the piece that would be placed on my board this week.</p> <p>Note a slight change: I originally had the piece designed as a person or a chess pawn-like piece, but I decided to change it to a Latte Stone, which is a symbol of my heritage from Guam. I chose this design because it would look nicer if it were to be modeled (the face of the pawn might come out a bit messy or uncanny), and it also further lends to the point of the project.</p>"},{"location":"assignments/week02/#piece-modeling-before-change","title":"Piece Modeling (Before Change)","text":"<p>Before changing what my piece would look like, I sketched and extruded its rough bodily dimensions. Details on how I made the ellipse part of the design can be found in the Using Fusion 360 section, since the steps were essentially the same (except for a couple of different dimensions). I also added a rectangle for the neck of the piece and a circle coincident with the neck to act as a head. However, while I was designing the head, I decided that the base reminded me of the Latte stone and it would also be a nicer design choice.</p> <p>Old design body sketch:</p> <p></p> <p>Stopping point:</p> <p></p>"},{"location":"assignments/week02/#using-fusion-360","title":"Using Fusion 360","text":"<p>Fusion 360 was fairly easy to use to design my piece.</p> <p>I started off by creating a parameter to determine the length of the base of the piece labeled BaseDiam, and I set its value to 47.5 mm. I then created a new component to store the piece. I used the BaseDiam parameter to construct an ellipse for the base of the Latte stone, with the length of the minor axis set to BaseDiam.</p> <p>After constructing the base and using appropriate dimensions and constraints, I then added a circle on top of the semicircle for the top of the Latte Stone. I also added some lines diving it in half and cutting off the circle so that I could use the revolve tool on the sketch.</p> <p>Throughout the process of making this, I ensured that my dimensions were determined parametrically with respect to the base of the Latte stone. That way, if I ever needed to change the length of the piece, my other dimensions could easily adapt.</p> <p></p> <p>After finishing the sketch, I revolved it around the vertical axis. I shelled the bottom of the piece in order to store any electronics I might need. Then, to finish off my design, I added 2 mm fillets to the top and bottom edges, and I added a 1 mm fillet to the intersection point.</p> <p></p> <p>There were not any major problems in designing the object in Fusion 360. The only slight issue was attempting to find underconstrained elements. I watched this tutorial, and I followed the instructions to see underconstrained elements. Despite taking a little bit of time, it will be fairly easy to do this process in the future.</p> <p>Here is the process used to see underconstrained elements:</p> <p></p>"},{"location":"assignments/week02/#using-freecad","title":"Using FreeCAD","text":"<p>I watched and followed several tutorials on how to navigate FreeCAD such as this video.</p> <p>I first figured out how to create parameters, which could be achieved by making a spreadsheet in the tree view and editing its values. I really liked this method of defining parameters, since it can be customized as much as you want and it is easy to navigate.</p> <p></p> <p>I created a new body and a new sketch, and I tried creating the same design as in Fusion 360. It was slightly strange applying constraints since some of them did not allow me to apply them. For example, it would not let me make a dimension between two points. </p> <p></p> <p>I eventually got the constraints to work, and I tried to revolve the design. However, I got this error when trying to do it:</p> <p></p> <p>I also could not select specific regions of the sketch to revolve. I looked the problem up, but I could not figure out how to do it. Ultimately, I ended up redoing the sketch with only the regions that would be revolved. I created an elliptical arc for the base and a circular arc for the head. This was not too much of a problem, but some constraints were not decreasing the degrees of freedom when they should have. I eventually got the sketch to fully constrain, but I was still not able to revolve it.</p> <p></p> <p>I was able to fix the problem by using the trim edge tool to cut off lines that were unnecessary to the revolve. To compensate for them, I also made a constructing line and set its dimension as a placeholder to fully constrain the sketch.</p> <p></p> <p>I then successfully revolved the sketch and used the Thickness tool to create a 2 mm inner shell. I struggled at first to do this since I accidentally had an outer shell selected, but I fixed the error fairly quickly. To finish the design, I added fillets to the edges.</p> <p>Here are images of the final design:  </p> <p>FreeCAD was very hard to understand, and I still do not understand some aspects of what I designed. Fully constraining the object made little sense to me, and it was difficult to navigate each menu.</p>"},{"location":"assignments/week02/#using-onshape","title":"Using Onshape","text":"<p>Onshape felt really easy to use after having experience with other CAD programs. I was able to design my component with no need to watch a tutorial due to similarities to Fusion 360.</p> <p>I first tried to figure out how to create a variable (parameter). I created a variable, which was placed in my design hierarchy. Later, I figured out that I could have made a variable global by using Variable Studios. I named the variable BaseDiameter, set it to 47.5 mm, and moved it into the part of the hierarchy where the piece was.</p> <p>The sketch was very simple to design and constrain. I tried to design my piece in the same way that I designed it in Fusion 360 (requiring me to select specific parts of the sketch for the revolve). I created the ellipse and circle shapes with no problems, and there were also no problems with constraints. It was really easy to find unconstrained elements since they were highlighted blue as opposed to black.</p> <p></p> <p>The revolve tool also allowed me to select only specific parts of a sketch, so I was able to do it with no problems. I then applied the shell to the bottom face and fillets on their respective edges very easily.</p> <p>Finished design images:  </p> <p>Here is the link to my design.</p> <p>There were no problems encountered while using Onshape, but I do not like the fact that it requires a constant online connection to use.</p>"},{"location":"assignments/week02/#overall-pros-and-cons-of-each-program","title":"Overall Pros and Cons of Each Program","text":""},{"location":"assignments/week02/#fusion-360","title":"Fusion 360","text":"<p>Pros:</p> <ul> <li>Prior experience with the software</li> <li>Neat component management</li> <li>Timeline of previous tools used in a component</li> <li>Easily accessible search menu</li> <li>Parameters menu easy to access and edit</li> </ul> <p>Cons:</p> <ul> <li>Slightly tedious to see underconstrained elements</li> </ul>"},{"location":"assignments/week02/#freecad","title":"FreeCAD","text":"<p>Pros:</p> <ul> <li>Able to keep parameters in a neat spreadsheet with descriptions and other things you want to add</li> </ul> <p>Cons:</p> <ul> <li>Complicated menus and UI</li> <li>Can\u2019t figure out how to only select part of a sketch</li> <li>Requires constraints for seemingly unnecessary things (e.g. defining dimensions for both minor radii of an ellipse)</li> <li>Adding constraints is complicated and doesn\u2019t work as intended sometimes (e.g. adding dimensions between 2 points)</li> <li>Hard to search for specific tools or commands</li> </ul>"},{"location":"assignments/week02/#onshape","title":"Onshape","text":"<p>Pros:</p> <ul> <li>Extremely intuitive interface</li> <li>Easy to see underconstrained sketch elements (highlighted blue)</li> <li>Easy to search for tools</li> </ul> <p>Cons:</p> <ul> <li>Can only use with online connection</li> <li>Somewhat complicated to manage assemblies</li> </ul>"},{"location":"assignments/week02/#cad-program-choice","title":"CAD Program Choice","text":"<p>I\u2019m sure that with enough experience and watching enough tutorials on FreeCAD, I could get a better understanding of how to use it decently, but for the sake of time and efficiency, I do not think that it will be viable to use for Fab Academy. Onshape was very easy to learn after already having used CAD programs. Although Onshape\u2019s features are very easy to use, I feel like Fusion 360 would be best to use due to my prior experience and its relative simplicity in relation to software such as FreeCAD.</p>"},{"location":"assignments/week02/#vector-program-cuttle","title":"Vector Program - Cuttle","text":"<p>I used a built-in tutorial to learn the basics of Cuttle. Here is the shape that I made with the tutorial:</p> <p></p> <p>I wanted to make a basic design of the board where my final project would go. To start, I made a box that was 20 x 27 in for the border of the board. Next, I wanted to create an outline of the island of Guam. I did not know how to trace a bitmap in Cuttle, nor could I find a tutorial on how to do it, so I made a bitmap of Guam in Inkscape and exported it to Cuttle. I rescaled Guam to fit nicely inside of my box shape, which was very simple to do. Centering was also easy, since the midpoints of each path were visible, and I could just place them on top of each other. Finally, I made another square to roughly hold a 7 x 5 in small screen. Here is the final design.</p> <p></p>"},{"location":"assignments/week02/#raster-program-gimp","title":"Raster Program - GIMP","text":"<p>To help guide me through GIMP, I used this tutorial.</p> <p>I wanted to modify an image of Slave Knight Gael, which is a character from the video game Dark Souls III. The image I used can be found on the Fandom site.</p> <p>Here is the original image:</p> <p></p> <p>To start the design, I opened my desired image as a new GIMP file. I navigated the menus for a bit to see what I could do, and I decided to add a blurred border to the image, which could be done with Filters -&gt; Decor -&gt; Fuzzy Border. I chose to make it dark red, since that would complement the image best.</p> <p>I next added a layer of fog over the image. To find the Fog tool, I went to Filters -&gt; Decor -&gt; Fog. I set the transparency to around 40% and made it have a light red color, which caused the fog to be subtle but add nicely to Gael\u2019s outline and the background.</p> <p>Fog option menu:</p> <p></p> <p>Image with fog and border:</p> <p></p> <p>To finish off the image, I chose to add yellow text saying \u201cGael\u201d to the bottom left by creating a new layer and using the Text Tool. </p> <p></p> <p>I also wanted a glowing effect on the text, so I followed this tutorial. I duplicated the text into a new layer, selected that layer, and went to Filters -&gt; Blur -&gt; Gaussian Blur to create my desired effect.</p> <p></p> <p>I feel like the modifications I made to the image made it more like a teaser image for the game than an actual image from the game, which was my intended effect. Here is the final image:</p> <p></p> <p>Note: I did not include the .xcf file that held the GIMP design because it was too large to include. The image above is a compressed version of the image exported from the file.</p> <p>GIMP was very easy to use because of prior experience creating raster images with programs such as Photoshop, and I feel like it will be good if I need to quickly edit an image to place on my site or make it slightly nicer.</p>"},{"location":"assignments/week02/#gravity-sketch","title":"Gravity Sketch","text":"<p>On Monday (2/5/24), I and others at the Charlotte Latin Fab Lab used VR headsets to use Gravity Sketch. Gravity Sketch is a program designed to make models in a 3D interactive environment.</p> <p>Here is one of the VR headsets (Oculus Quest 2). Thanks to Collin Kanofsky for providing the image.</p> <p></p> <p>I worked through the tutorial on the Learn tab and I figured out how to use the basic modeling tools. After that, I designed a person made of basic 3D shapes. I worked through using the 3D object drawing tools, line drawing tool, and the tool to change the color of objects.</p> <p>Exporting the file to a computer was a slight challenge. I first tried to upload the design file directly to my computer from the VR using a cable connection. However, I was not given administrator priveleges on the VR headset, which prevented me from linking the files on the headset to my computer.</p> <p>Instead, I had to login to my school\u2019s Gravity Sketch account and export it to the account\u2019s online files. Once I exported the design from the Gravity Sketch app as a .obj file, I opened the Gravity Sketch website, logged in, and downloaded the file from there.</p> <p>Here is the design I made imported into Fusion 360:</p> <p></p>"},{"location":"assignments/week02/#reflection","title":"Reflection","text":"<p>This week, I refreshed my knowledge on using Fusion 360 and learnt two new CAD programs: FreeCAD and Onshape. FreeCAD was very challenging to use, so I don\u2019t think that I will use it again for CAD anytime soon. Onshape was very easy to use, but its reliance on online connection makes it slightly worse than Fusion for me. I tried out a vector program called Cuttle as well, which was very simple to use but lacked some features which would help a lot. I also learned how to edit raster images via GIMP. GIMP has a very simple UI, and its features are slightly limited, but they are very easy to learn. Finally, I also learned how to 3D model with Gravity Sketch in virtual reality. Gravity Sketch seems great to use for sketching an idea and wanting to visualize it, but I do not think that it is reasonable to use it to make polished or more complex CAD designs. Overall, I learned how to use several programs fpr digital design, and I now have a better idea of what programs I can use depending on my circumstances.</p>"},{"location":"assignments/week02/#credits","title":"Credits","text":"<p>Once again, thanks to Adam Stone for his image compressor. I will likely be using it as I go on with my documentation.</p>"},{"location":"assignments/week03/","title":"3. Computer Controlled Cutting","text":"<p>This week I worked on using different computer controlled cutting devices and designing a parametric design kit.</p> <p>You can find the files used this week here.</p>"},{"location":"assignments/week03/#group-project-laser-cutter-characteristics","title":"Group Project - Laser Cutter Characteristics","text":"<p>My group\u2019s project for Week 3 can be found here.</p> <p>I worked with Landon Broadwell, Ryan Zhou, and Evan Park.</p> <p>The group portion of Week 3 was to describe the following characteristics of our lab\u2019s laser cutter: focus, power, speed, rate, kerf, joint clearance and types.</p> <p>I worked on the kerf and joint types.</p> <p>To measure the kerf of the laser cutter, I designed 10 squares in CorelDRAW measuring 25.4 x 25.4 mm. When cut, I then measured the widths and heights of each square, and I took the average of their values. Finally, I subtracted that value from 25.4 mm to get the approximate kerf.</p> <p>For joint types, I analyzed the hold, durability, and ease of implementation for each of them.</p>"},{"location":"assignments/week03/#vinyl-cutter-sticker","title":"Vinyl Cutter - Sticker","text":"<p>I decided on my sticker design with two colleagues: Collin Kanofsky and David Vaughn.</p> <p>We settled on making each of our stickers represent a character from the video game Among Us. I chose mine specifically to represent an Among Us character with its tongue out. Here is the image I used:</p> <p></p> <p>I first imported the image into Inkscape. I was slightly confused on how to create a bitmap for the design since when I tried, it would only to the outline of the entire image rather than separating it by color. Eventually, I managed to get each color to separately outline, but there were two lines for each when there should have been one.</p> <p></p> <p>I manually deleted each repeating path, which was slightly tedious but fairly easy to do. I then set the line width to hairline for each path, and I exported the file as a .dxf file so I could import it into Silhouette Studio.</p> <p></p> <p>From this point on, I used this tutorial on how to make multi-color vinyl decals.</p> <p>I imported the file into Silhouette without any problems, and I proceeded to gather a white sheet for the teeth, blue sheet for the goggle, red sheet for the basic body color, and black sheet for the outline. I placed each sheet on a cutting sheet, and I used a CAMEO Vinyl Cutter to cut the parts pertaining to that color.</p> <p>Here is a video of cutting the black part of the sticker.</p> The video is not supported in your browser. <p></p> <p>I weeded each of the colored sheets so that only the parts that I wanted transfered remained.</p> <p> </p> <p>After that, I used transfer tape to move the red part of the sticker on the black part, and since the blue part was short, I moved it on manually without transfer tape. I also decided against using the white teeth due to their small size and the fact that I could simply make them transparent.</p> <p>Red Part on Black Part:</p> <p></p> <p>Once I transposed each of the sheets on each other, I placed a final layer of transfer tape on them.</p> <p></p> <p>I then applied the sticker to the window where all of the Charlotte Latin Fab Lab\u2019s stickers had gone, and I ensured that my sticker was next to the other Among Us Stickers.</p> <p>My Final Sticker:</p> <p></p> <p>Other Among Us Stickers:</p> <p></p>"},{"location":"assignments/week03/#parametric-design-kit-design-file","title":"Parametric Design Kit - Design File","text":"<p>I used Fusion 360 to parametrically design my kit. When starting to think about what pieces I would design, I defined parameters for groove depth, groove width, and side length for the pieces. I determined the groove width using the joint clearance portion of the group part (3.5 mm). Here are the respective values for each parameter:</p> <p></p> <p>When actually designing pieces, I first made a square piece since it seemed simple, and I could model other pieces relative to it. My plan was to create a single side then use a circular pattern to rotate that side 4 times and create a square. I created two horizontal lines with a groove going downwards. I then added a chamfer to the outside corners of the groove, and I set constraints so that each dimension was relative to the parameters and other dimensions.</p> <p></p> <p>Finally, for the circular pattern, I needed to figure out how to find a center point to revolve around. To solve this, I created two construction lines connecting to each other and the ends of the edge. I set the angle between them and the edge to 45 degrees and set them equal to each other, and their intersection was the center point. I finished the square by using a circular pattern to revolve the edge 4 times around the center.</p> <p></p> <p>The other shapes that I created were primarily based on the edge used to create the square piece. I only had to change two things to accomodate for regular polygons of larger size: changing the angle of the construction lines and changing how many of the edge I would duplicate with the circular pattern. For the angles, I used the formula: (n - 2) * 90 / 2 to find the angle in degrees, where n is my desired amount of sides. With this formula, I created a regular pentagon, hexagon, and decagon (note that the side lengths of each shape are the same as the square due to that being unchanged).</p> <p>Pentagon:</p> <p></p> <p>Hexagon:</p> <p></p> <p>Decagon:</p> <p></p> <p>Next, I designed connectors for each piece type. I started by creating a simple linear connector with grooves on opposite sides of it and a length the same as the square piece. I just designed one half of the connector and mirrored it along the center to the other side.</p> <p></p> <p>I also wanted to design a connector that could bend easily. I followed this tutorial to get a general idea of how it could work. I copied the previous connector piece and made it roughly 2.5 times longer. Next, I added lines on the alternating between the edge and center of the cardboard to create the bendable parts.</p> <p></p>"},{"location":"assignments/week03/#parametric-design-kit-laser-cutting","title":"Parametric Design Kit - Laser Cutting","text":"<p>Once I was done designing my pieces in Fusion 360, I exported the sketch as a .dxf file. After exporting, I used the computer linked to a Fusion M2 Epilog Laser Cutter to open the file in CorelDRAW, and I sent the job to the printer as it was (each piece next to each other and one of each). I laser cut my pieces on cardboard.</p> <p>The initial cut finished with no problems, and suprisingly, the slots for my pieces fit perfectly into each other. I designed a quick shape with my pieces as a placeholder.</p> <p>Here are the initially cut pieces (the small connector fell through the laser cutter bottom):</p> <p></p> <p>Placeholder shape:</p> <p></p> <p>I then edited the CorelDRAW file to include multiple of the same pieces: 3 bendable connectors, 12 short connectors, 4 square pieces, 3 pentagonal pieces, 2 hexagonal pieces, and one decagonal piece. I used the same process as earlier to laser cut the pieces on cardboard, and all of them came out well.</p> The video is not supported in your browser. <p>With some pieces, since I had 3 bendable ones, I made a fishing pole out of them.</p> <p></p> <p>Then, with all of my pieces, I tried to make a humanoid shape (somewhat successfully).</p> <p> </p>"},{"location":"assignments/week03/#reflection","title":"Reflection","text":"<p>This week was probably the most fun I have had so far. It improved my skills in using parameters in modeling to allow for ease of change, and it also generally made me more accustomed to CAD programs. I also learned how to make a multi-color vinyl decal and had some more experience with vector programs like Inkscape and CorelDRAW. I did not enjoy making the vinyl sticker as much, but it was nice to collaborate with my peers. I also learned about kerf of a cuttin tool for the first time, which will most likely help in future designs.</p>"},{"location":"assignments/week03/#credits","title":"Credits","text":"<p>All credits are mentioned where they are used respectively. Once again, credit to Adam Stone for his image resizer.</p>"},{"location":"assignments/week04/","title":"4. Electronics Production","text":"<p>This week I milled, assembled, and programmed a microcontroller development board and characterized my Lab\u2019s milling machines.</p> <p>You can find the files used this week here.</p>"},{"location":"assignments/week04/#milling-the-microcontroller-development-board","title":"Milling the Microcontroller Development Board","text":"<p>The board I milled was the suggested board: the Quentorres.</p> <p>I obtained the design for the board from the Charlotte Latin Fab Lab instructors, and used the Bantam Tools software to operate the milling machine. To start, the Fab Academy students at Charlotte Latin were shown how to use the software, and we created a workflow based off of that. That workflow was used throughout the process of making the PCBs.</p> <p>We also tried to mill a sample board, but it failed for somewhat unknown reasons. Here is the failed board:</p> <p></p> <p>To mill the design, I used 1/64\u201d, 1/32\u201d, and 1/16\u201d bits to cut with my desired width. I placed two-sided tape on a copper sheet and placed that sheet inside of the milling machine. Next, I installed the 1/64\u201d bit into the spindle and probed it to get its depth. I then selected for there to be no holes in the design (since they were unnecessary for the board), and I generated the G-Code for the milling process. ?I positioned the cut so that it was on the bottom left corner of the board (offset 4\u201d in both x and y directions), and I started the job.</p> <p>Partway through, the software required me to change the milling bit to the 1/32\u201d and later the 1/16\u201d bit, so I changed the bits and resumed the process. Once the board was done milling, I kept the copper pad in the machine, and I, along with David Vaughn, proceeded to mill 3 more boards.</p> <p>Part of the milling process:</p> The video is not supported in your browser. <p>One finished board:</p> <p></p> <p>Once all of the boards were done, I took one of the boards, removed the two-sided tape, and I made sure that it was clean. This would be the board that I would continue to use.</p> <p></p>"},{"location":"assignments/week04/#problems-while-milling","title":"Problems While Milling","text":"<p>The bit broke two times while I was milling (one 1/64\u201d bit and one 1/16\u201d bit).</p> <p>The 1/64\u201d bit broke during the tool installation process. The spindle was placed above an empty spot of the bed. and it began to move down to measure how deep the bit was inserted and its general length. However, even when the tip of the bit hit the bed, the spindle continued to move down, causing the bit to break. </p> <p>Mr. Durrett suggested that this was due to a failed electrical connection between the bit and the spindle, so I used alligator clips to connect them together. Once I obtained a new bit and inserted it, along with placing the alligator clips on the bit and the spindle, it was able to install properly.</p> <p>Alligator clips on milling machine:</p> <p></p> <p>The 1/16\u201d bit broke during the final part of milling one of the boards. The milling process seemed to be going fine until that point, but the bit suddenly snapped while milling. I am unsure of why this happened because I ensured that the tool was installed correctly, the tool\u2019s length was measured correctly, and the depth of the copper was still measured to be the same.</p> <p>Broken 1/16\u201d bit:</p> <p></p>"},{"location":"assignments/week04/#soldering-components-on-the-board","title":"Soldering Components on the Board","text":"<p>Here is a picture of my parts list with the parts next to their respective labels.</p> <p></p> <p>Before soldering  the Xiao RP2040 chip, I made sure to place capton tape across the small nodes since I did not intend for them to conduct electricity.</p> <p></p> <p>I soldered the Xiao RP2040 chip and a couple of diodes and resistors with no problems. I tried out using a solder pump for soldering, when soldering the chip, which was very efficient. However, I think that I would prefer using solid solder due to the ability to both place the solder and heat it at the same time.</p> <p></p> <p></p> <p>Once I soldered one of the LEDs below the RP2040 chip, I realized that there was supposed to be a 1K Ohm resistor in its place. </p> <p></p> <p>I removed the LED, but I accidentally ended up ripping a trace linking it to another LED. I tried to put solder in that spot, but it wouldn\u2019t stick. </p> <p>Ripped trace (Middle of the board):</p> <p></p> <p>To fix this problem, I obtained a small wire and soldered it to the end of the LED (not the one that was removed) and the resistor to make the connection that the trace would have made. </p> <p>Fixed trace (before cutting excess):</p> <p></p> <p></p> <p>Once I was done, I tested its conductivity, and it was successful.</p> <p></p> <p>I soldered the rest of the components with no problems. Here is a picture of the final soldered board.</p> <p></p> <p></p>"},{"location":"assignments/week04/#programming-the-board","title":"Programming the Board","text":"<p>To program the board, I downloaded the Arduino IDE onto my computer.</p> <p>Next, I plugged the XIAO RP2040 onto my computer using a USBC cable, and I reset the board by holding buttons R and B.</p> <p>I unplugged it and plugged it in again, but for some reason, the board was not turning on despite it turning on earlier. I was told by Mr. Dubick that there might be a short in the part of the board where there should have been holes. I checked for conductivity between the points, and it was confirmed that there was one. To fix this, I used a razor blade to cut the copper between each circle, and the board worked well.</p> <p></p> <p>On the Arduino IDE, I made sure to install the RP2040 package in File-&gt;Preferences-&gt;Additional Board Manager URLs and set my current board to the Seeed XIAO RP2040. I also changed my port to the one that the chip was plugged into. First, I wrote some code to make the LEDs light up in an alternating pattern, disregarding the switch on the board.</p> <p>Here is my code for that section:</p> <pre><code>void setup() {\n  //Sets up pins with LEDs for output\n  pinMode(26, OUTPUT);\n  pinMode(0, OUTPUT);\n  pinMode(1, OUTPUT);\n}\n\n//Repeats code inside indefinitely\nvoid loop() {\n  //Turns each LED on, waits 100 milliseconds, turns it off, and turns on next one\n  digitalWrite(26, HIGH);\n  delay(100);\n  digitalWrite(26, LOW);\n  digitalWrite(0, HIGH);\n  delay(100);\n  digitalWrite(0, LOW);\n  digitalWrite(1, HIGH);\n  delay(100);\n  digitalWrite(1, LOW);\n}\n</code></pre> <p>I tested out the code, but for some reason, my 3rd LED was not working.</p> The video is not supported in your browser. <p>I realized that I had not soldered the corresponding pin of the RP2040 to the board, so I quickly did that. I tested it again, but the LED still did not work. I really quickly tried a conductivity test on both sides of the LED, and it did not go through at all. Since it was probably a bad LED, I replaced it and everything lit up fine.</p> The video is not supported in your browser. <p>Next, I modified my code to only turn on the LEDs when the tactile switch on the board is pressed. I looked up how to do it, and I found this article suggesting that I use the digitalRead() function. </p> <p>Here is the code:</p> <pre><code>void setup() {\n  //Sets up pins with LEDs for output\n  pinMode(26, OUTPUT);\n  pinMode(0, OUTPUT);\n  pinMode(1, OUTPUT);\n  //Sets up pin with switch for input\n  pinMode(27, INPUT);\n}\n\n//Repeats code inside indefinitely\nvoid loop() {\n  //Sets a boolean to check if the button is being pressed down\n  bool buttonPressed = digitalRead(27);\n  //Does the LED sequence if the button is pressed down\n  if (buttonPressed) {\n    pressedFunc();\n  }\n  //Turns off the LEDs when the button is not pressed\n  else {\n    digitalWrite(26, LOW);\n    digitalWrite(0, LOW);\n    digitalWrite(1, LOW);\n  }\n}\n\nvoid pressedFunc() {\n  //Turns each LED on, waits 100 milliseconds, turns it off, and turns on next one\n  digitalWrite(26, HIGH);\n  delay(100);\n  digitalWrite(26, LOW);\n  digitalWrite(0, HIGH);\n  delay(100);\n  digitalWrite(0, LOW);\n  digitalWrite(1, HIGH);\n  delay(100);\n  digitalWrite(1, LOW);\n}\n</code></pre> <p>When testing out the code, the button worked successfully:</p> The video is not supported in your browser."},{"location":"assignments/week04/#group-portion","title":"Group Portion","text":"<p>I worked with Landon Broadwell for the group portion this week. It can be found here.</p> <p>In describing the characteristics of our in-house milling machine, we both contributed to each of the characteristics for the different bits. We split this by bit type and characteristic measured.</p> <p>I also worked on the primary outline for the workflow to send a design to a PCB house, and we both refined it.</p> <p>Finally, in the trace test for comparing bits, my group used the 1/64\u201d bit. Both Landon and I worked in the process of milling the trace test design. Thanks to Kabir Nawaz for finding a valid file to test the trace lines.</p>"},{"location":"assignments/week04/#reflection","title":"Reflection","text":"<p>This week\u2019s assignment was very frustrating at first, but I eventually got more accustomed to using the milling machines and soldering to produce PCBs and learned from the errors made along the way. I started by milling a pre-designed board. During this process, I encountered a couple of machine errors such as the bit not stopping when installing the tool. I also had some problems which I could not explain, such as the sudden breaking of the 1/16\u201d bit. Soldering was a fairly easy process, but I came across the problems of a possible short circuit because of unintentionally connecting traces (likely due to bad cutting by the milling machine). During programming, I was also able to gain experience in dealing with problems when my 3rd LED would not work. The group portion was not too hard, but it really helped me to solidify my understanding of the capabilities of milling machines. In total, I learned very much this week and this will probably be very useful for later use.</p>"},{"location":"assignments/week04/#credits","title":"Credits","text":"<p>All credits are mentioned where they are used respectively. Once again, credit to Adam Stone for his image resizer.</p>"},{"location":"assignments/week05/","title":"5. 3D Scanning and Printing","text":"<p>This week I worked on testing using a 3D printer and learning how to 3D scan objects.</p> <p>You can find the files used this week here.</p>"},{"location":"assignments/week05/#3d-printing","title":"3D Printing","text":""},{"location":"assignments/week05/#planning-the-design","title":"Planning the Design","text":"<p>To fulfill the assignment of making a design that can\u2019t be made with subtractive manufacturing, I decided to make a design with multiple joints that cannot be pulled apart without breaking the design and has several different parts. </p> <p>When thinking of what I wanted to make, I originally had the idea of a basic ball and socket joint that could rotate a box around a spherical part. I then extended this idea to include multiple of these joints that are all linked together in a polygon shape. I ended up choosing for there to be 6 sides specifically.</p>"},{"location":"assignments/week05/#designing-in-fusion-360","title":"Designing in Fusion 360","text":"<p>I started by making a sketch on the horizontal plane with a regular hexagon so that I could model my parts off of it. Next, to one vertex of the hexagon, I added a rectangle that would hold two of the ball joints.</p> <p>In order to create a shape for the openings of the ball joints, I created diagonals on two of the corners of the rectangle. I also created a -2mm offset (not relative to the actual print) for that border and add two circles inside of the rectangle to represent the spheres in the joint.</p> <p></p> <p>Once I was done sketching, I extruded the outer part of the box (the part between the offset outline and the original outline) and added a bottom and top face to it.</p> <p>Next, I created the two slots for the openings of each of the joints by negatively extruding an offset rectangle onto the angled faces of the box.</p> <p></p> <p>To finish the joint template, I created two spheres based off of the circles I had drawn in my sketch. Once I had all of the components of the joint done, I used the Circular Pattern feature to duplicate it on each vertex of the hexagon.</p> <p>To create the connectors for the joints, I started by extruding a pipe going between each adjacent sphere. I then duplicated it to connect each other adjacent sphere by using a circular pattern again (see image).</p> <p></p>"},{"location":"assignments/week05/#exporting-and-slicing-with-prusaslicer","title":"Exporting and Slicing with PrusaSlicer","text":"<p>From Fusion 360, I exported my finished design as a .STL file. Once done exporting, I imported the STL file into PrusaSlicer.</p> <p>I ensured that I selected my desired printer (Prusa Mini) and the correct filament, and I scaled the overall width of my design to roughly 70 mm. I selected for there to be supports everywhere because my design was very unstable, and I sliced the design.</p> <p></p> <p>After the design was fully sliced, I exported its GCode as a .gcode file.</p>"},{"location":"assignments/week05/#printing-with-octoprint","title":"Printing with OctoPrint","text":"<p>My Fab Lab already had OctoPrint set up with our 3D printers, so I used that to upload the file. I logged onto one of the computers connected to my lab\u2019s network and opened the OctoPrint url for the printer that I wanted to use. I imported my file onto the printer, let it heat up, and sent the design for printing.</p> <p>There were no problems during this process, and the print was able to come out successfully.</p> <p></p>"},{"location":"assignments/week05/#problem-with-supports","title":"Problem with Supports","text":"<p>When I tried to take off the supports in my design, I was not able to do so very easily. I realized that since I had both a bottom and top face for the joints, it would be very difficult to get out the supports from inside of the joint. I decided to abandon this print, since this would be unfeasable to do and have too much risk of breaking the design.</p> <p>I tried fixing the design by simply removing the top face of each joint. This would allow for less supports on the inside (removed the ones supporting the top face) and easier access to remove the supports. I repeated the same process for getting the new design into OctoPrint, and I let the design print.</p> <p>When the print finished, however, I saw that the part going over the joint holes was broken because it was too thin and didn\u2019t have any supports. The spheres also easily came out of their respective joint holes, which completely went against the purpose of my design.</p> <p></p>"},{"location":"assignments/week05/#final-working-design","title":"Final Working Design","text":"<p>I attempted to solve these problems by making the walls of the joints thicker and the spheres in the joints bigger. This would prevent anything breaking or coming out when it should not. </p> <p>After I did this and also made the connector pieces wider (so the design would not break easily), I tried 3D printing it again. I had to 3D print at my house, which had a slightly different process (since I had not set up OctoPrint). I uploaded my gcode file onto the USB that came with my printer, and I inserted the USB into my home printer. I then selected my design on the printer UI, and the print ran well.</p> The video is not supported in your browser. <p></p> <p>None of the object broke while printing, which was a good sign. When it came to taking off supports, it was really hard at first, but it was not as hard as my first print. The supports at the openings of the joints were especially hard to get off due to the limited space to pull on them. Though it took a while, I was eventually able to get all of the supports off to finish my 3D printed object.</p> <p></p>"},{"location":"assignments/week05/#interesting-characteristics","title":"Interesting Characteristics","text":"<p>All of the joints were able to move freely around, which caused them to form some interesting patterns that I had not thought of when designing the object. For example, when turning three of the joint pieces upside down, I created a star-like hexagon that was very stable (the shape was not able to be varied by simply moving it horizontally).</p> <p></p> <p>I also created a less stable bow-tie shape by turning two opposite joint pieces upside down.</p> <p></p> <p>The spheres could also move out of the top of their joints to allow for more variation in side lengths and patterns that could be made.</p> <p>Overall, this design was a lot more fun to experiment with than I had originally thought.</p>"},{"location":"assignments/week05/#3d-scanning","title":"3D Scanning","text":""},{"location":"assignments/week05/#setup","title":"Setup","text":"<p>For my object to scan, I wanted to scan a tape dispenser. I thought it would be interesting to see how the software could capture its shape and different aspects.</p> <p>I used an app on my phone called PolyCam to 3D scan the tape dispenser. Their website can be found here.</p>"},{"location":"assignments/week05/#scanning","title":"Scanning","text":"<p>I used the LiDAR feature on PolyCam to scan my object, which detects light to measure the relative position and orientation of an object. I scanned it by slowly moving around it and showing as many perspectives as I could.</p> <p>My first scan came out quite well, but the front of the tape dispenser was not able to be modeled fully.</p> <p>I scanned a couple more times until I found a scan I liked and I uploaded that scan to the cloud.</p> <p></p> <p></p> <p>Here is a link to my design that can be interacted with.</p>"},{"location":"assignments/week05/#converting-to-obj","title":"Converting to OBJ","text":"<p>PolyCam only allowed me to export the file as a .GLB since I did not have a premium subscription, so I used this online converter to convert it to my desired format: a .OBJ file.</p> <p>I tried opening the converted file in Fusion 360, which was done successfully. However, the image projection that was done on PolyCam was not represented in the OBJ file, which instead had a solid color. Importing the design into Fusion also allowed me to see some more holes in my design and things that might have been able to be scanned better.</p> <p></p>"},{"location":"assignments/week05/#group-portion","title":"Group Portion","text":"<p>I worked with Landon Broadwell this week, and our group documentation can be found here.</p> <p>The group portion of this week consisted of testing the design rules for my lab\u2019s 3D printers.</p> <p>I contributed by printing an all-in-one test on our Prusa Mini printers. I obtained the design file online and kept the same dimensions since they were part of some of the tests.</p> <p>I also documented how some of the tests, such as the overhang and hole test, came out on the Prusa Mini.</p> <p>My group also used the Formlabs 3D Printer to print another overhang test (horizontal), but Landon did the majortiy of that part.</p>"},{"location":"assignments/week05/#reflection","title":"Reflection","text":"<p>I enjoyed this week, and it felt a lot more relaxing than some of the previous weeks. I already had knowledge of how to 3D print and designing models, so there was not as much new material. I started the week by designing something that couldn\u2019t be made subtractively in Fusion 360, which I did by creating joint pieces that could not have been placed together after they were made and must have been manufactured that way. I had to go through multiple iterations of printing the design until all of the supports could come off well and it was sturdy enough not to break easily, but I eventually had a good final design. I also tried 3D scanning an object for the first time, which was really interesting to do. I never knew that photos taken from different perspectives could combine to form a semi-accurate 3D model of that object. I was also very surprised by the group portion since the Prusa Mini torture test passed all of the individual tests and had a solid structure.</p>"},{"location":"assignments/week05/#credits","title":"Credits","text":"<p>All credits are mentioned when they are used respectively.</p>"},{"location":"assignments/week06/","title":"6. Embedded Programming","text":"<p>This week I worked on programming a previously designed microcontroller to perform certain tasks and communicate.</p> <p>This week\u2019s files can be found here. Note that the majority of the files used are stored in Week 4\u2019s files because I already programmed the Quentorres board that week.</p>"},{"location":"assignments/week06/#programming-microcontroller-to-interact-with-leds","title":"Programming Microcontroller to Interact with LEDs","text":"<p>To program the board, I downloaded the Arduino IDE onto my computer.</p> <p>Next, I plugged the XIAO RP2040 onto my computer using a USBC cable, and I reset the board by holding buttons R and B.</p> <p>I unplugged it and plugged it in again, but for some reason, the board was not turning on despite it turning on earlier. I was told by Mr. Dubick that there might be a short in the part of the board where there should have been holes. I checked for conductivity between the points, and it was confirmed that there was one. To fix this, I used a razor blade to cut the copper between each circle, and the board worked well.</p> <p></p> <p>On the Arduino IDE, I made sure to install the RP2040 package in File-&gt;Preferences-&gt;Additional Board Manager URLs and set my current board to the Seeed XIAO RP2040. I also changed my port to the one that the chip was plugged into. First, I wrote some code to make the LEDs light up in an alternating pattern, disregarding the switch on the board.</p> <p>Here is my code for that section:</p> <pre><code>void setup() {\n  //Sets up pins with LEDs for output\n  pinMode(26, OUTPUT);\n  pinMode(0, OUTPUT);\n  pinMode(1, OUTPUT);\n}\n\n//Repeats code inside indefinitely\nvoid loop() {\n  //Turns each LED on, waits 100 milliseconds, turns it off, and turns on next one\n  digitalWrite(26, HIGH);\n  delay(100);\n  digitalWrite(26, LOW);\n  digitalWrite(0, HIGH);\n  delay(100);\n  digitalWrite(0, LOW);\n  digitalWrite(1, HIGH);\n  delay(100);\n  digitalWrite(1, LOW);\n}\n</code></pre> <p>I tested out the code, but for some reason, my 3rd LED was not working.</p> The video is not supported in your browser. <p>I realized that I had not soldered the corresponding pin of the RP2040 to the board, so I quickly did that. I tested it again, but the LED still did not work. I really quickly tried a conductivity test on both sides of the LED, and it did not go through at all. Since it was probably a bad LED, I replaced it and everything lit up fine.</p> The video is not supported in your browser. <p>Next, I modified my code to only turn on the LEDs when the tactile switch on the board is pressed. I looked up how to do it, and I found this article suggesting that I use the digitalRead() function. </p> <p>Here is the code:</p> <pre><code>void setup() {\n  //Sets up pins with LEDs for output\n  pinMode(26, OUTPUT);\n  pinMode(0, OUTPUT);\n  pinMode(1, OUTPUT);\n  //Sets up pin with switch for input\n  pinMode(27, INPUT);\n}\n\n//Repeats code inside indefinitely\nvoid loop() {\n  //Sets a boolean to check if the button is being pressed down\n  bool buttonPressed = digitalRead(27);\n  //Does the LED sequence if the button is pressed down\n  if (buttonPressed) {\n    pressedFunc();\n  }\n  //Turns off the LEDs when the button is not pressed\n  else {\n    digitalWrite(26, LOW);\n    digitalWrite(0, LOW);\n    digitalWrite(1, LOW);\n  }\n}\n\nvoid pressedFunc() {\n  //Turns each LED on, waits 100 milliseconds, turns it off, and turns on next one\n  digitalWrite(26, HIGH);\n  delay(100);\n  digitalWrite(26, LOW);\n  digitalWrite(0, HIGH);\n  delay(100);\n  digitalWrite(0, LOW);\n  digitalWrite(1, HIGH);\n  delay(100);\n  digitalWrite(1, LOW);\n}\n</code></pre> <p>N.B. this file and the files with the previously shown code can be found in my Week 4 files.</p> <p>When testing out the code, the button worked successfully:</p> The video is not supported in your browser."},{"location":"assignments/week06/#communication-between-microcontroller-and-computer","title":"Communication between Microcontroller and Computer","text":"<p>I was able to make the board display a message on the computer when the button on the microcontroller was pressed down.</p> <p>When looking up how I could transmit a message to the computer, I figured out that I could use Serial, and I used this reference for help. Serial helps to administer communication between my microcontroller board and a computer, which is exactly what I was looking for.</p> <p>To implement this, I first wrote in the setup() function: <code>Serial.begin(9600);</code></p> <p>This function sets the data rate (how often information on the board is transmitted to the computer) to 9600 bauds, or bits/second.</p> <p>I also used <code>Serial.print({INSERT CSTRING HERE});</code> whenever I needed to in the code to transmit a message to the Arduino Serial Monitor, which could be accessed through Tools-&gt;Serial Monitor or Ctrl + M on Windows.</p> <p>I then designed the program to communicate with the board when the button was pressed, which was slightly different than the previous program I made but fairly similar:</p> <pre><code>//Global variable definition\nbool buttonState = 0;\n\n//Allowing input from button and communication to Serial Monitor\nvoid setup() {\n  pinMode(27, INPUT);\n  Serial.begin(9600);\n}\n\nvoid loop() {\n  bool buttonPressed = digitalRead(27);\n  if (buttonState != buttonPressed) { //Checks if the current set button state conflicts with if the button is being pressed\n    //Sends a message saying the button has been pressed once it is initially pressed down\n    if (buttonState == 0) {\n      Serial.print(\"The button was pressed.\");\n    }\n    buttonState = !buttonState; //Flips the value of buttonState\n  }\n}\n</code></pre> <p>Here is the working communication:</p> The video is not supported in your browser."},{"location":"assignments/week06/#making-samd11c-board","title":"Making SAMD11C Board","text":"<p>Along with my group portion, I individually decided to mill a board implementing the SAMD11C chip for testing purposes. Since Group A had already found a board file for the SAMD11C, I decided to just use theirs. </p> <p>There were no problems while milling and stuffing this board.</p> <p></p> <p>To program the board, I used a binary called edbg. I downloaded the binary from the linked repository and connected the SAMD board to my computer using my Quentorres board from Week 4. I then ran the line <code>edbg -ebpv -t samd11 -f sam_ba_SAMD11C14A.bin</code> to allow me to program the SAMD board directly. Once I ensured that the upload verified, I then plugged the USB component of the SAMD board into my computer directly and uploaded a basic blink code to it (Since it is very similar to others I have done, I will not upload the file).</p> <p>Here is a video of the board successfully blinking:</p> The video is not supported in your browser."},{"location":"assignments/week06/#group-portion","title":"Group Portion","text":"<p>In this week, I worked with Angelina Yang and Kabir Nawaz. You can find our documentation here.</p> <p>For the group portion this week, we had to examine the datasheet for our assigned microcontroller (ATTiny412). We also learned how to make a programmer board and made the ATTiny412 blink through that board.</p>"},{"location":"assignments/week06/#attiny412-datasheet-contribution","title":"ATTiny412 Datasheet Contribution","text":"<p>I found an online source to reference for the datasheet and compiled the most important properties of the ATTiny412 in a table. I also obtained a pinout of the ATTiiny from that site. I did the same thing with the SAMD11C chip using this source. After that, I compared the two chips and concluded that the SAMD11C has many more features, but the ATTiny412 is better for less complex designs.</p>"},{"location":"assignments/week06/#making-programmer-board-contribution","title":"Making Programmer Board Contribution","text":"<p>I helped to find a board design file to hold the ATTiny412. At first, I used the Quentorres site to find what general design I was looking for, and I eventually found a nice and simple board design here. I needed to go to the GitLab page for the design and downloaded the copper design file (newBlinky-F_Cu.gbr).</p> <p>I also helped to mill the board. I uploaded the file into the Bantam Tools software and cut the board design using a 1/64\u201d and 1/32\u201d bit. There were no particular problems at this step.</p> <p>I gathered and soldered a couple of the components on the ATTiny412 board, including the LED and the header pins.</p> <p>In terms of programming, I followed Teddy Warner\u2019s documentation on how to get jtag2updi to create a programmer board and upload code via that board.</p> <p>My group struggled to get jtag to work at first, but we eventually got it to work with an Arduino. After using the Arduino, we also programmed our Quentorres boards to become a microcontroller programmer.</p>"},{"location":"assignments/week06/#reflection","title":"Reflection","text":"<p>This week was a nice review of how to program with Arduino and it helped me to learn how to program a microcontroller development board. I started with the individual assignment, which used the Quentorres board from week 4. I programmed it to interact (both input and output) with outside components, being mainly a button and a couple of LEDs. Afterwards, I learned how to make a program for the board to communicate with the computer through Serial. The group portion was definitely the hardest part of this week. Although it was hard to find the design and figure out why uploading our programs to our chip would not work, I feel like I learned a lot about the general process of using a programmer board to send a program to a chip. I also programmed the SAMD11C chip using a different upload process, which helped me to find out new ways of programming chips. This was probably one of the harder weeks so far, but I feel like I learned many things from the mistakes made.</p>"},{"location":"assignments/week06/#credits","title":"Credits","text":"<p>All credits are mentioned where they are used respectively.</p>"},{"location":"assignments/week07/","title":"7. Computer Controlled Machining","text":"<p>This week I worked on using the large CNC machine to create a big object.</p> <p>You can find the files used this week here.</p>"},{"location":"assignments/week07/#cam-design-in-fusion","title":"CAM Design in Fusion","text":"<p>I used Fusion to design my object because I could easily create a 3D model based on the sketches that I drew.</p>"},{"location":"assignments/week07/#idea-and-basic-render","title":"Idea and Basic Render","text":"<p>I wanted to design a basic table that could also function as a shelf. I planned to add joints to the design and not use any adhesive or screws, so I first created a rough 3D model of the design without any of the joints to show points of overlap and how the table would generally fit together.</p> <p></p>"},{"location":"assignments/week07/#piece-and-joint-planning","title":"Piece and Joint Planning","text":"<p>I planned to ultimately use two types of joints with my project: mortise and tenon joints and finger joints. I feel that mortise and tenon joints can provide a strong connection when on all sides, even without glue or screws. I will also use the finger joints primarily for the corners that I want to be flat (such as the back side corners).</p>"},{"location":"assignments/week07/#designing-in-fusion","title":"Designing in Fusion","text":"<p>I first created some parameters so that I could change the dimensions of anything in the design if I wanted to. Here is the list of parameters and their initial values (will be changed later).</p> <p></p> <p>I then created a sketch for each of the sides as I intended in my paper sketch. Once all of the sketches were finished, I extruded them as separate bodies from each other to see if there was any overlap or any joints that did not fit. I had quite a few inaccurately placed joints here because I forgot to account for wood with in a couple of my calculations. I fixed everything up until the 3D model looked good.</p> <p></p> <p>Once I got everything done, I changed the values of the parameters and the model scaled successfully.</p>"},{"location":"assignments/week07/#cam-toolpath-with-aspire","title":"Cam Toolpath with Aspire","text":""},{"location":"assignments/week07/#exporting-from-fusion","title":"Exporting from Fusion","text":"<p>To convert my Fusion file into a vector file, I first needed to find a way to flatten all of my extruded objects so that they could all be projected into a singular sketch. </p> <p>Mr. Budzichowski recommended his documentation for this, in which he used the \u201cArrange\u201d tool. This tool takes a set of components and flattens them all onto a 2D plane of a specific size.</p> <p>Once I got all of the objects flattened, I then created a new sketch on the same plane and projected those objects into the sketch. Finally, I exported a .dxf file containing the sketch lines.</p> <p></p>"},{"location":"assignments/week07/#importing-into-aspire-and-dog-bones","title":"Importing into Aspire and Dog-Bones","text":"<p>In Vectric Aspire, I created a new document. I set its width to 4ft and length to 2ft and set no offset for the origin. I also wanted to cut with a Z Zero position at the machine bed. I then obtained my .dxf file fom earlier and imported it into Aspire. </p> <p>Next, I created dog-bone fillets at each corner where it was necessary. I originally planned to use the 3/8\u201d tool in our lab for everythin0g in the design, but I realized that it would not fit fully inside of the mortise cutouts. Therefore, I used the 1/8\u201d tool as well. My instructors stated that my dog-bone fillets should not be a smaller radius than that of the tool we used (need to divide the diameter by 2). To keep it safe, I made my fillets roughly 0.05-0.1 inches larger.</p> <p>Here is the edited vector in Aspire:</p> <p></p>"},{"location":"assignments/week07/#generating-cam-toolpath-for-mortises","title":"Generating CAM Toolpath for Mortises","text":"<p>Next, I needed to create the CAM toolpaths for each closed shape that I intended to cut.</p> <p>I first wanted to create the toolpath for my mortises. I decided to make these pocket cuts since they were small and I did not want to secure them with tabs. I ensured that I set my tool to the 1/8\u201d straight tool.</p> <p>For this toolpath, even though I had a sacrificial layer, I set the cut depth to 0.45 in (the actual measurement of my selected peice of wood). I made 4 passes (as not to exceed the diameter of the tool for each pass) and set the direction of the cut to \u201cClimb\u201d because I wanted a slightly cleaner cut.</p> <p>I pressed \u201cCalculate\u201d to generate the toolpath, and I reviewed the simulation of it running. There were no apparent problems in the simulation. (See these in next section)</p>"},{"location":"assignments/week07/#cam-toolpath-for-outlines","title":"Cam Toolpath for Outlines","text":"<p>For my outlines, I needed to use a profile cut to cut only along the outlines.</p> <p>I set the cut depth to 0.45 in for this cut as well, and I set my tool to the 3/8\u201d compression spiral. I also only needed 2 passes for this, since each pass would only be approximately 0.225 inches, which is less than 3/8 of an inch.</p> <p>I added four tabs to each outline so that the wood would not detach during the milling process. I also made sure to set the cut type to \u201cOutline\u201d since I wanted to keep my pieces constant with how I designed them in Fusion (and make the tenons large enough to fit in the mortises).</p> <p>I calculated this toolpath as well, and I ran its simulation along with the pocket cut (I made the pocket cut first to avoid the wood moving while cutting them). Nothing went badly, so I exported my toolpaths as a single .sbp file for cutting, since I would be using a large ShopBot.</p> <p>Here are both of the toolpaths:</p> <p></p> <p>Here is the finished simulation of the toolpaths:</p> <p></p>"},{"location":"assignments/week07/#using-the-shopbot","title":"Using the ShopBot","text":"<p>Throughout the process of cutting, I followed my lab\u2019s workflow on how to use the ShopBot CNC Machine. Since someone had already used the machine before me on that day, I did not need to run the Start of Day routine (and the End of Day routine as well).</p> <p>The machine also automatically changes its bit when necessary, so I did not need to manually install a bit.</p> The video is not supported in your browser."},{"location":"assignments/week07/#fixturing-the-wood","title":"Fixturing the Wood","text":"<p>Before I could start, I wanted to secure my piece of wood to the bed of the machine. I used a brad gun to apply brad nails across the entirety of my board. I made sure to add them on the edges and where there was free space on the middle of the board. I did not add enough in the middle of the board, however, which would be found out later.</p> <p></p>"},{"location":"assignments/week07/#air-cut","title":"Air Cut","text":"<p>I used the ShopBot software to control the CNC machine.</p> <p>To initialize the air cut, I jogged the Z-Axis to 1 inch above my board (Z = 1.45) and set that as the new Z-Zero. This would allow me to run a test cut of my design and check if everything with the toolpath worked well. Before I did this, I applied the dust skirt to the bit in order to </p> <p>I loaded my file onto the ShopBot software, and I pressed the physical \u201cSTART\u201d button to begin spinning the bit. I then proceeded to run the cut. The cut did the pockets first, so I watched it simulate roughly 5 of them. Since nothing was unusual, I stopped the air cut and proceeded to the actual cut.</p> <p>Height of the air cut above the material:</p> <p></p>"},{"location":"assignments/week07/#actual-cut","title":"Actual Cut","text":"<p>I used the C3 command to reset the Z-Zero and home the ShopBot. Next, I loaded my file once again, pressed the \u201cSTART\u201d button to spin the bit, and ran the cut. </p> <p>The pockets seemed to be cutting out very well on the first part of the cut, but when the tool got closer to the middle of the board, the pockets did not cut entirely fully. When I looked back at where I placed the brads, I realized that I probably should have placed another one in the middle of the board, so the wood was likely raised there because of that.</p> <p>Video of a pocket cut:</p> The video is not supported in your browser. <p>When it came time to change the bit, the bit was successfully changed, but the dust skirt fell off. I needed to stop the job in order to place it back on since the tool was too low. I jogged the tool up the Z-Axis and placed the skirt back on. Since this was already the end of the pocket cut, I decided to import a new SBP file with just the profile cuts into the ShopBot software since I could not resume the job once it was stopped.</p> <p>The profile cuts had the same problem as the pocket cuts: they did not cut fully through at the middle of the board. I decided to simply let the job continue since trying to secure the middle would cause inconsistencies with joint placements.</p> <p>One of the profile cuts:</p> <p></p> <p>Below is an image of the finished job:</p> <p></p> <p>Once the job was done, I used a multitool to remove the tabs and cut through the parts that were not fully cut through.</p>"},{"location":"assignments/week07/#assembling-the-shelf-table","title":"Assembling the Shelf-Table","text":"<p>All of the wood pieces:</p> <p></p>"},{"location":"assignments/week07/#refining-the-pieces","title":"Refining the Pieces","text":"<p>After being removed from the board, the pieces had frayed edges and still had some parts of the tabs remaining. To fix this, I first used the multitool to cut off all parts of the tabs. I also used a dremel to get rood of any excess wood on the edges.</p>"},{"location":"assignments/week07/#joint-problem","title":"Joint Problem","text":"<p>When I tried testing if one of my pairs of joints would fit together, I noticed that the tenons were very slightly too big to fit. This was a very big problem since I had more than 20 of these joints in my entire design. Mr. Budzichowski gave the suggestion that I could sand down the edges of the tenons to make a ramp fit. This would allow me to partly push together the joints and use a mallet to join them together. However, this comes at the cost of not being able to take apart the joined pieces of wood.</p> <p>At the suggestion of Dr. Taylor, I also used a piece of sandpaper attached to a multitool to sand the insides of the mortises. After a couple of hours sanding each piece and seeing if their respective joints could fit together, I was eventually ready to assemble my table.</p>"},{"location":"assignments/week07/#assembly","title":"Assembly","text":"<p>I started by attaching the shelves and flap cover to the back cover of the shelf since that is the innermost part of the design. I pushed the shelves in as much as I could with my hands. Then, I obtained a mallet and a piece of hardwood. I placed the hardwood wherever I wanted to hit in order to ensure that my wood would not break due to the mallet\u2019s pressure.</p> <p>The hardest part the assembly came once I fully inserted the shelves and flap cover into the back cover. I had to somehow fit the side pieces onto the shelves, which required fitting 3 separate pieces and 6 total joints. I also needed to deal with the finger joints at one edge of the side pieces.</p> <p></p> <p>I needed to slightly sand down the tenon connected to the middle shelf since it was not pushed in as far as the other pieces. This could have been due to a multitude of factors, but I suspect that I had accidentally left a small amount of the tabs on it.</p> <p>I struggled trying to get all of the three shelf pieces to fit in the side piece at the same time. Dr. Taylor suggested that I instead slightly push the side piece into one of the shelves and do the same for each of the pieces. This would make it so that the side piece would not bend so much that part of it would be pushed out when further using the mallet.</p> <p>Eventually, with enough trial-and-error, I was able to get the first side on. The second side followed a similar process, but it was slightly easier since the shelves were already mostly fixed in place.</p> <p></p> <p>I then added the front flap of my design, which was not too hard since I was only joining two separate pieces of wood with only two joints.</p> <p>Adding the top piece was also quite hard since all of the slight imperfections made in my design beforehand caused a fairly significant offset in the joints. I decided to use two adjacent tenons as a reference for what parts I needed to sand. I only needed to sand some of the finger joints a very slight amount since the offset between the front flap and back cover was not too significant. However, the offset between the two sets of joints from the side covers was quite bad. I had to sand down the tenons (not used for reference) a fairly large amount, but they eventually fit into their designated mortises.</p> <p>I used the same process as I did for the sides to insert the two separate joint pairs together.</p> <p>Once the top cover was placed, my entire table was finished!</p> <p></p> The video is not supported in your browser. <p>The table was also very strong since there was little to no extra space between the mortises and tenons after using the mallet to push them together.</p>"},{"location":"assignments/week07/#group-portion","title":"Group Portion","text":"<p>In this week, I worked with Angelina Yang and Kabir Nawaz. Our documentation can be found here.</p> <p>Our group assignment this week was primarily to test various factors for our lab\u2019s CNC machine.</p> <p>I helped to test the different tools in the lab and some of the different fixturing methods. Everyone in the group also contributed to testing runout.</p>"},{"location":"assignments/week07/#reflection","title":"Reflection","text":"<p>This week was probably the hardest week of Fab Academy so far. The entire process of designing something that should be able to be held together with joints alone (no glue or screws), converting it to a CAM toolpath, cutting the toolpath, and sanding down every one of my joints took a large amount of time and was very tedious to do. From this, however, I was able to learn some things to be very aware of when using the CNC machine. When using this machine in the future, I need to account better for the tolerance of the machine by adding a larger offset between the mortises and tenons than I previously had. Also, even if there is not much space to do it, I should try my best to add brads (or whatever fixturing tools) to large areas in my material where there are not any others. Overall, I made quite a few mistakes this week that I will take to heart whenever using my lab\u2019s ShopBot or any other large CNC machine.</p>"},{"location":"assignments/week07/#credits","title":"Credits","text":"<p>Thanks to Mr. Budzichowski and Dr. Taylor for giving suggestions and helping me figure out how to assemble my table. All other credits are mentioned where they are used respectively.</p>"},{"location":"assignments/week08/","title":"8. Electronics Design","text":"<p>This week I worked on designing my own circuit board and learning PCB design software.</p> <p>You can find the files used this week here.</p>"},{"location":"assignments/week08/#personal-pcb-board-design-in-kicad","title":"Personal PCB Board Design in Kicad","text":"<p>I chose Kicad as the EDA software to make my circuit board and used this tutorial as reference.</p> <p>Before I started, I needed to import the (Fab Library)[https://gitlab.fabcloud.org/pub/libraries/electronics/kicad] into Kicad.</p>"},{"location":"assignments/week08/#pcb-desired-components","title":"PCB Desired Components","text":"<p>For the microcontroller for my PCB, I chose the ATTiny412. In my PCB, I wanted to have a decoupling capacitor between power and ground, an LED that is always on when power is supplied to the board, a programmable LED, an UPDI pin, and 3 pins for connecting either an input or output to the board.</p>"},{"location":"assignments/week08/#schematic","title":"Schematic","text":"<p>It was fairly easy to design the schematic for my board since I already had a rough idea of how the components would connect. I started by adding my desired components and positioned them so that they could connect well, and I connected them respectively. </p> <p>Once done with the design, I ran an ERC (electrical rules checker) check, and I received two errors saying the same thing: Input Power pin not driven by any Output Power pins</p> <p>I fixed these errors by adding power flags at the VCC and GND indicators to show that they are a source of power. I ran the ERC again, and there were no more errors.</p> <p></p>"},{"location":"assignments/week08/#footprint-assignment","title":"Footprint Assignment","text":"<p>For each of my components, I needed to assign a footprint to represent its actual shape and the location of each of its wires. Since my lab\u2019s components are primarily based off of those in the Fab library, I was able to find all of these components in both my lab and in the footprints provided by the Fab library.</p> <p></p>"},{"location":"assignments/week08/#pcb-design-layout","title":"PCB Design Layout","text":"<p>After assigning the footprints, I used the PCB board editor to place the components in their real-world positions. I obtained all of the components by using the Update PCB with changes made to schematic tool (on the upper tool bar), which also showed the designated connections between the components.</p> <p>Positioning each component was slightly difficult because the layout of the ATTiny412 was not the same as in the schematic. To prevent overlapping traces as much as possible, I changed connections in the schematic with regard to the actual layout of the ATTiny.</p> <p>I added traces in tandem with positioning the components, which took a while due to having to change the positions of the traces and aligning the components to others to make the design neater.</p> <p>Once I finished the board, I went to the Edge.Cuts layer and drew and outline for the board.</p> <p></p> <p>To check if everything was connected well, I used the DRC (design rules checker). I found that there were a couple of unconnected traces that I had forgotten to delete, so I removed them. There were also 12 warnings showing that the silkscreen of the header pins was clipped by the solder mask. Since this doesn\u2019t matter much when actually milling the board, I decided to disregard the warnings.</p> <p>To make sure that my board looked good overall, I used the Show 3D viewer window tool to visualize the actual 3D board. There were no apparent problems, so I considered my design to be finished.</p> <p></p>"},{"location":"assignments/week08/#physical-board","title":"Physical Board","text":""},{"location":"assignments/week08/#exporting-and-milling-the-board","title":"Exporting and Milling the Board","text":"<p>To export my design file as a .gbr to use in the milling machine software, I pressed File -&gt; Fabrication Outputs -&gt; Gerbers. Since this circuit only has front side traces, I unchecked every layer except the copper mask and the edge cuts. I then pressed the Plot button and obtained the files from the shown directory.</p> <p>I followed the same process for milling these files as in Week 4.</p> <p>Some problems encountered while milling were that the piece of copper that I was milling was raised in some places. This caused some traces to not cut fully, and this happened on two separate attempts to make the board. One of the attempts ended up being functional by using a blade to cut the excess copper, but I decided that I would not use it since it may accidentally connect and cause a short.</p> <p></p> <p>Eventually, I got a board that I liked so I proceeded to stuff that one.</p> <p></p>"},{"location":"assignments/week08/#stuffing-the-board","title":"Stuffing the Board","text":"<p>I used my file in the Kicad PCB editor as reference while stuffing the board. Since all of the components used in my design were Fab components, I was easily able to find them in my lab and add them to my board. Soldering the capacitor was slightly hard, but other than that, I had no major problems soldering.</p> <p></p>"},{"location":"assignments/week08/#testing-and-programming","title":"Testing and Programming","text":"<p>I tested the board by plugging it into my Quentorres board from Week 4. I saw that the power LED was on, so I knew that power was successfully transferred to the board.</p> <p></p> <p>To program my chip, I used the header pins on my ATTiny board to connect the power pins, ground pins, and UPDI pins (designated pin 6 on both). I used jtag2updi to make the Arduino Uno a programmer and programmed the LED at pin 7 of the ATTiny to blink using it. I used the same code as the Quentorres with the pin changed (but you can find the changed file in Week 8 Files). I originally had an error in uploading the code to my ATTiny, but I realized that I had selected the wrong pin (since pin 7 shown on the ATTiny actually corresponded to pin 4). I tried uploading again, and it worked with no problems.</p> The video is not supported in your browser. <p>I also wanted to test if the button on my board worked. To do this, I set pin 0 as an input pin and turned on the programmable LED on my board when the button was pressed down. Once again, I did the exact same thing for the Quentorres board, so I used the same code with some pins changed. This upload was immediately successful since I had everything set up already from the blink code.</p> The video is not supported in your browser."},{"location":"assignments/week08/#group-portion","title":"Group Portion","text":"<p>In this week, I worked with Angelina Yang and Kabir Nawaz. You can find our group documentation here.</p> <p>Our task this week was to observe the operation of a microcontroller circuit board. To do this, we used a multimeter and an oscillator to measure voltage, current, and other aspects.</p> <p>All of the group members were involved in most of the steps for using these tools. I mainly used the multimeter to measure the voltage supplied to an ATTiny chip and the amount of current running through it. I also measured the voltage drop of an analog LED that gradually got brighter and dimmer.</p>"},{"location":"assignments/week08/#reflection","title":"Reflection","text":"<p>I thought that this week was not too hard, but it was really useful to learn. I learned the basics of circuit design using Kicad and designed my own PCB with it. I feel like while designing the schematic, I solidified my understanding of how circuitry works and was able to apply my knowledge as well. I was slightly confused on how some of the footprints connected, but I eventually figured it out. This week will also likely be useful for the Output and Input weeks since I left 3 pins connecting to the board for whatever use I needed. The board I made might also be used for my final project.</p>"},{"location":"assignments/week08/#credits","title":"Credits","text":"<p>All credits are mentioned where they are used respectively.</p>"},{"location":"assignments/week09/","title":"9. Output Devices","text":"<p>This week I worked on programming outputs that I plan to use in my final project (an OLED screen and a speaker).</p> <p>You can find the files used this week here.</p>"},{"location":"assignments/week09/#new-board-design","title":"New Board Design","text":"<p>When deciding which outputs to use, I realized that I only had one pin going out of my board for power and ground. Since I needed to provide power and connect ground to my output device, I made a new board with more power and ground ports. Because I also needed to use I2C, I paired the power and ground with the respective ports for SDA and SCL for the ATTiny412 to provide convenience when connecting an output device.</p> <p>My schematic and design were mostly derived from my previous board, but it looked quite different.</p> <p></p> <p></p> <p>There were also no problems while milling and stuffing the board, as well as programming it to do the same things as last week.</p> <p></p> The video is not supported in your browser. <p>Once I had finally finished my board, I accidentally broke one of the male headers off, causing 3 pads to rip off with it. I decided that this would be very hard to fix and I wanted my board to have some longevity, so I remilled a new board but instead of male headers, I used female headers.</p> <p>Once again, there were no substantial problems, so I finished up the board and used it for my outputs.</p> <p></p> The video is not supported in your browser."},{"location":"assignments/week09/#programming-an-oled-screen","title":"Programming an OLED Screen","text":""},{"location":"assignments/week09/#oled-component-and-board-used","title":"OLED Component and Board Used","text":"<p>I wanted to program an OLED screen since I plan to ultimately use a larger one with color for my final project.</p> <p>I checked the components in my lab, and I decided to use a 128x64 SSD1306 OLED screen. I also wanted to make use of my new Connor Cruz 2.0 :) board because I had specifically configured it to easily access outputs. The board uses an ATTiny412, so I had to keep in mind the memory that the uploaded program used.</p>"},{"location":"assignments/week09/#programming-screen-with-arduino-uno","title":"Programming Screen with Arduino Uno","text":"<p>I started by trying to program my OLED screen using an Arduino Uno since I had easy access to them and it has a large amount of Flash memory. I was able to find a very useful website that specified how to use the Adafruit_SSD1306 library to program the OLED. I tried out the sample code on the website:</p> <pre><code>#include &lt;Wire.h&gt;\n#include &lt;Adafruit_GFX.h&gt;\n#include &lt;Adafruit_SSD1306.h&gt;\n\n#define SCREEN_WIDTH 128 // OLED display width,  in pixels\n#define SCREEN_HEIGHT 64 // OLED display height, in pixels\n\n// declare an SSD1306 display object connected to I2C\nAdafruit_SSD1306 oled(SCREEN_WIDTH, SCREEN_HEIGHT, &amp;Wire, -1);\n\nvoid setup() {\n  Serial.begin(9600);\n\n  // initialize OLED display with address 0x3C for 128x64\n  if (!oled.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {\n    Serial.println(F(\"SSD1306 allocation failed\"));\n    while (true);\n  }\n\n  delay(2000);         // wait for initializing\n  oled.clearDisplay(); // clear display\n\n  oled.setTextSize(1);          // text size\n  oled.setTextColor(WHITE);     // text color\n  oled.setCursor(0, 10);        // position to display\n  oled.println(\"Hell World!\"); // text to display\n  oled.display();               // show on OLED\n}\n</code></pre> <p>N.B. The OLED screen has an SCL and SDA port since it features I2C, so I needed to plug them into their respective ports (also labeled SCL and SDA).</p> <p>The upload was successful and the OLED screen was able to show the text.</p> <p></p> <p>The website also had a basic explanation of what each of these functions and object definitions did, so I had a better idea of how to use the Adafruit_SSD1306 library.</p>"},{"location":"assignments/week09/#programming-oled-with-attiny412-connor-cruz-20","title":"Programming OLED with ATTiny412 (Connor Cruz 2.0 :) )","text":"<p>It was very hard to upload code to the OLED screen using the ATTiny412, mostly due to its limited 4KB of Flash memory.</p> <p>When I tried to verify the code, I received this error (shortened due to length):</p> <pre><code>c:/.../avr/bin/ld.exe: address 0x3210 of C:\\...\\arduino_build_497981/Regular-SSD1306.ino.elf section '.text' is not within region 'text'\n\nc:/.../avr/bin/ld.exe: C:\\...\\arduino_build_497981/Regular-SSD1306.ino.elf section '.rodata' will not fit in region 'text'\n\nc:/.../avr/bin/ld.exe: address 0x3210 of C:\\...\\arduino_build_497981/Regular-SSD1306.ino.elf section '.text' is not within region 'text'\n\nc:/.../avr/bin/ld.exe: region 'text' overflowed by 8854 bytes\n\netc.\n</code></pre> <p>I\u2019m fairly confident that this error was caused due to the memory used by the program exceeding the memory limit of the ATTiny412 (since there is an overflow error of 8854 bytes). I tried removing all parts of the code except the include statements and the definition of the oled object, but the program still took up too much memory.</p> <p>I tried to do the same with the U8g2 library and also tried to use TinyWireM rather than Wire in my code, but it only slightly reduced the amount of memory used.</p> <p>After quite a lot of searching, I was able to find the SSD1306Ascii library, which is able to program an SSD1306 screen but can only output text. I felt that this compromise was alright since I had already figured out how to use the SSD1306 library and wanted to learn how to reduce the memory as well.</p> <p>From the SSD1306Ascii library, I first tried verifying the Wire128x64 example file since that would provide a basis for me to program the OLED screen using the ATTiny412. It verified but took up 90% of the Flash memory, so I was slightly limited on what I could actually include in my code.</p> <p>I connected the OLED screen to the power, ground, SCL (PA2), and SDA (PA1) of my Connor Cruz 2.0 :) board and uploaded the code, producing the intended result:</p> <p></p> <p>Once I confirmed that the upload was done, I analyzed several of the examples from the SSD1306Ascii library and wrote some code to display some basic custom text on the screen. I wanted it to output the first couple of lines of the Aeneid, a Latin poem written by Virgil. Here is the program:</p> <pre><code>#include &lt;Wire.h&gt;\n#include \"SSD1306Ascii.h\"\n#include \"SSD1306AsciiWire.h\"\n\n#define I2C_ADDRESS 0x3C\n\nSSD1306AsciiWire oled;\n\nvoid setup() {\n  Wire.begin();\n  Wire.setClock(400000L);\n  oled.begin(&amp;Adafruit128x64, I2C_ADDRESS);\n\n  oled.setFont(Callibri11); \n}\n\nvoid loop() {\n  delay(2000);\n  oled.clear();\n   oled.set2X();\n  oled.println(\"The Aeneid\");\n  oled.set1X();\n  delay(2000);\n  oled.clear();\n  oled.println(\"Arma virumque cano\");\n  oled.println(\"Troiae qui primus\");\n  oled.println(\"ab oris\");\n  delay(2000);\n  oled.clear();\n  oled.println(\"Italiam fato\");\n  oled.println(\"profugus Laviniaque\");\n  oled.println(\"venit\");\n  delay(2000);\n  oled.clear();\n  oled.println(\"vi superum saevae\");\n  oled.println(\"memorem Iunonis\");\n  oled.println(\"ob iram\");\n}\n</code></pre> <p>This program used 4050B out of 4096B of Flash memory, which was really close to all of it. I had tried to make the program more efficient by storing each of the lines in a 3-dimensional character array (since I did not want to import C++ string) and using a for loop, but that actually exceeded the Flash memory by about 500B.</p> <p>Overall, I decided to simply keep my program the same and uploaded it to my Connor Cruz 2.0 board, which produced this:</p> The video is not supported in your browser."},{"location":"assignments/week09/#group-portion","title":"Group Portion","text":"<p>In this week, I worked with Landon Broadwell. You can find our documentation here.</p> <p>Our assignment this week was to find the power consumed by an output device. Since both of us used an OLED screen in our individual assignment, we used this for the group assignment as well.</p> <p>We both contributed to all of the steps in finding the power consumption (measuring the voltage and current), since it was a fairly short process. We used my OLED screen to measure this because it was more convenient at that time.</p>"},{"location":"assignments/week09/#reflection","title":"Reflection","text":"<p>This week was really helpful to help advance in ideas for my final project. I worked with programming a small OLED screen using several libraries and controller boards. I had chosen an OLED screen (since I wanted to use a similar display on my final project), and I feel like I could now implement the same on a larger scale for my project. The only significantly hard part of this week was attempting to fit a program for the OLED screen on an ATTiny412. This was particularly challenging because many of the commonly used libraries (e.g. Adafruit_SSD1306 and U8g2) still took up too much memory on the chip. I eventually settled for a text-only library: SSD1306_Ascii. The group work was also nice to gauge the power consumption of the OLED screen for future reference.</p>"},{"location":"assignments/week09/#credits","title":"Credits","text":"<p>I troubleshooted quite a bit with Landon Broadwell this week since we both attempted to program the OLED screen with several different libraries, so credit to him for his help throughout the process. All other credits are mentioned where they are used respectively.</p>"},{"location":"assignments/week10/","title":"10. Mechanical Design","text":"<p>This week I worked on designing a machine with a group.</p> <p>In this week, I worked with Angelina Yang, Kabir Nawaz, and Alana Duffy. We decided to make a claw machine.</p> <p>Our group page can be found here.</p>"},{"location":"assignments/week10/#stepper-motors","title":"Stepper Motors","text":"<p>I contributed by making our stepper motors work with an Arduino Uno and a CNC shield. Note that this was modified by Kabir to integrate with the other electronics.</p> <p>Since we wanted to have the claw move on X and Y axes (and eventually make the claw move on the Z axis), we chose to use stepper motors due to their precision.</p> <p>When I initially tried to program them, I did not know where to start, so I followed this tutorial. It detailed how to program the motors to move using a CNC Motor Shield on an Arduino Uno.</p> <p>Luckily, our lab already had all of the components we needed to make the motors function: a CNC shield, a 12V power supply, wires to connect to the shield, and stepper motors (Creality 42-34).</p> <p>The CNC shield was able to be placed directly on the pins in the Arduino Uno. I then checked the minimum voltage drop for the corresponding motor drivers, which was approximately 8.5V. I changed it to approximately 8.6 V using a flathead screwdriver and checked the voltage with a multimeter.</p> <p>Unlike other groups from our lab, we did not use GRBL. You can find more detailed documentation on this on the group site.</p>"},{"location":"assignments/week10/#first-gantry","title":"First Gantry","text":"<p>I also primarily designed the first gantry we used, including the outside pieces and the two pieces that would hold the middle t-slot. However, due to complications with making the machine square and the reliability of 3D printed parts, this design was scrapped.</p> <p>Since the two sides of the gantry were too long to fit on the printing bed, I made the decision to join multiple pieces together via screws. In hindsight, this was probably a bad decision since the screws not being fully fastened could allow for some error with the machine.</p> <p>Also, I did not include guides for the t-slots, so they were able to rotate somewhat easily and therefore made the machine not square. We eventually tried to resort to using super glue to affix them, which somewhat worked, but it was still unreliable with the stress that the system would endure.</p> <p>You can find images and more documentation on the faults and attempts made for this gantry on the group page.</p>"},{"location":"assignments/week10/#final-gantry","title":"Final Gantry","text":"<p>I also helped to find the second gantry design, which was used by our colleagues who made the Ouija Board. Note that this design can be found here, although there were modifications made since our project has a z-axis and thus a different design for the middle piece.</p> <p>I very much helped with assembly of all components for both gantries, such as screwing in components, creating and expanding shelves to hold the gantry, and creating some of the 3D printed parts. I also worked on finding and obtaining the pulleys and other items that would be used with the gantry.</p> <p>I primarily cut the linear rails that were used for the final gantry\u2019s movement and the one that was used for stability for the Z-axis. This was a hard task since there are not any machines that can cut metal in our lab at the moment. I used a diamond bit on a dremel to cut the rail, and I used a grinding stone to chamfer the edges to allow for easier insertion of sliding pieces and to make the rail as flat as possible.</p> <p>Once again, for all of these topics, you can find more detailed documentation and images on the group site.</p>"},{"location":"assignments/week10/#reflection","title":"Reflection","text":"<p>This week (which took a fair bit longer than a week to complete) made me realize how hard it is to design a working machine. Working on the individual components, I realized how many problems can be encountered with the various components involved and especially how crucial it is for a machine to be almost exactly square for it to even function. I was very satisfied with the final product since it took so long for those problems to be resolved, and it came out very well. Everything seemed to be stable, and every component of the project worked consistently. Although I likely do not plan on creating another machine of a similar scale in the future, I believe that I have learned the most out of this week. It enhanced my troubleshooting skills, time management skills, and perseverance for future projects.</p>"},{"location":"assignments/week10/#credits","title":"Credits","text":"<p>Thanks to all of my group members for continuing to work on the project despite its many failures. Also, thanks to Garrett for his consistent help and advice throughout the development of the project. All other credits are mentioned where they are used to respectively.</p>"},{"location":"assignments/week11/","title":"11. Input Devices","text":"<p>This week I worked on designing and programming sensors for my final project.</p> <p>You can find the files used this week here.</p>"},{"location":"assignments/week11/#sensor-ideas","title":"Sensor Ideas","text":"<p>For my final project, I needed sensors under an opaque acrylic layer that could tell when a piece was placed on top of them.</p> <p>Before this week, I had intended to use hall effect sensors to achieve this effect. I thought of placing a magnet in the piece that would be placed.</p> <p>I was slightly confused where to start, so I attended Global Open Time. The instructors there recommended a couple of possible sensors I could use:</p> <ul> <li>Hall effect magnetic sensor</li> <li>Capacitive touch sensor</li> <li>Time of flight</li> <li>Step response</li> </ul> <p>Since I planned for my acrylic not to have any gaps for the sensors, time of flight would not work very well. However, step response seemed to fit very well since it can sense distance, even if there is an object intercepting it. Therefore, I chose to make and program a step response sensor this week.</p>"},{"location":"assignments/week11/#step-response","title":"Step Response","text":""},{"location":"assignments/week11/#circuit-design-milling-and-stuffing","title":"Circuit Design, Milling, and Stuffing","text":"<p>I primarily used Neil\u2019s examples for this week to learn how step response works. I chose to use the TX-RX model.</p> <p>First, I made a connector piece for my Connor Cruz 2.0 board. That board was perfect to use for this since I could use the SDA and SCL pins for TX and RX.</p> <p>The design process was fairly easy, as I primarily based my design off the examples and the diagram in Neil\u2019s lecture. The TX pin was connected to 5V and GND via 1M resistors, as well as being connected to  and the RX pin would be connected to an electr. This board was deemed: Flubben I.</p> <p></p> <p></p> <p>The milling and stuffing process also went well.</p> <p></p>"},{"location":"assignments/week11/#electrodes","title":"Electrodes","text":"<p>For my electrodes, since I only planned on doing a temporary design for now, I used spare copper boards for PCB milling. I then attached jumper wires to each of these so that they could be connected to the Flubben I.</p> <p></p>"},{"location":"assignments/week11/#old-programming","title":"Old Programming","text":"<p>I first created a function to digitally output HIGH and LOW to the TX pin every millisecond. I then stored the analog input of the RX pin after both the HIGH and LOW outputs.</p> <p>I then set this process to iterate 100 times. For each iteration, I obtained the difference between the high and low readings, and I added it to a sum variable. After all 100 samples were done, I divided by the sample size to obtain an average difference. This would mostly cancel any possible noise.</p> <p>I placed a book (Godel\u2019s Incompleteness Theorems) on the two electrodes, and I used trial and error to see the average values that would result from an object being directly above the book. I then set an LED to go on whenever this was sensed and turn off when it was not. When testing, it was somewhat able to work. Here is a video of the process:</p> The video is not supported in your browser. <p>Since the LED kept turning on and off, I decided to make the LED turning on more generalized. I set up a counter variable. I added 1 when the LED should be on and subtracted 1 when the LED should be off. Here was the result using a Green Lantern rubber duck:</p> The video is not supported in your browser. <p>I\u2019m not sure why this worked, but in the next section, I was able to fix this and get more consistent results.</p>"},{"location":"assignments/week11/#fixing-the-code-and-sensor","title":"Fixing The Code and Sensor","text":"<p>I used a new book for the sensors since I did not have Godel\u2019s Incompleteness Theorems at the time of fixing. I instead used Cicero In Catilinam I &amp; II.</p> <p>I first decided not to divide the average by the amount of samples since that would make my ranges less precise. Since I wanted to sense specifically when something was touching or close to touching the book, I wanted the range to be fairly specific.</p> <p>When looking back at Neil\u2019s example step-response sensors, I realized that the Grounds were not actually connected to the copper plates (the wires were cut off). Once I disconnected the grounds from both the Flubben I and the electrodes, the sensor worked very well.</p> <p>Cicero Choking Sensor (LED turns off when hand is placed on the face):</p> The video is not supported in your browser. <p>For the group project, I also decided to make the sensor set the brightness of an LED depending on how far a hand is away from the book. I first obtained a general range of analog sensor inputs I wanted to map to the LED, and I used a map function to assing them to 0-255 (brightness of the LED). There was a little bit of noise when sensing, but it was overall quite decent.</p> <p>Oscilloscope Detecting Analog LED:</p> <p> The video is not supported in your browser. <p></p>"},{"location":"assignments/week11/#working-code","title":"Working Code","text":"<pre><code>#define rxpin 3\n#define txpin 2\n#define settle 100\n#define samples 100\n\nvoid setup() {\n  pinMode(txpin, OUTPUT);\n  pinMode(4, OUTPUT);\n}\n\nlong int average() {\n  long int up, down, avg;\n   avg = 0;\n   noInterrupts();\n   for (int i = 0; i &lt; samples; i++) {\n      digitalWrite(txpin, HIGH);\n      up = analogRead(rxpin);\n      delayMicroseconds(settle);\n      digitalWrite(txpin, LOW);\n      down = analogRead(rxpin);\n      delayMicroseconds(settle);\n      avg += up - down;\n   }\n   interrupts();\n   return avg;\n}\n\nvoid betterEst() {\n  int counter = 0;\n  for (int i = 0; i &lt; 10; i++) {\n    long int avg = average();\n    if (avg &gt; 15000) counter++;\n    else counter--;\n  }\n  if (counter &gt;= -5) digitalWrite(4, HIGH);\n  else digitalWrite(4, LOW);\n}\n\nvoid instantCheck() {\n  long int avg = average();\n  if (avg &gt; 9000) digitalWrite(4, HIGH);\n  else digitalWrite(4, LOW);\n}\nvoid analogLED() {\n  long int avg = average();\n  int newAvg = map(avg, 10000, 15000, 0, 255);\n  analogWrite(4, 255 - newAvg);\n}\n\nvoid loop() {\n  //Uncomment one function depending on which test you want to run.\n\n   //instantCheck();\n   betterEst();\n   //analogLED();\n}\n</code></pre> <p>I was quite happy with these results, and I\u2019m glad that I was able to fix the sensor to have very consistent inputs.</p>"},{"location":"assignments/week11/#group-portion","title":"Group Portion","text":"<p>I worked with Richard Shan this week. Our documentation can be found here.</p> <p>The assignment this week was to probe the analog and digital signals of a sensor.</p> <p>We were both involved in most of the aspects of this group project. Since Richard\u2019s sensor was essentially digital (a camera to detect faces), and mine was analog, we decided to test out both sensors with the oscilloscope.</p> <p>I mainly worked on the step response reading and configuring and LED to match its inputs, while Richard worked on getting digital outputs from the camera. We both used the oscilloscope to obtain readings from the other\u2019s sensor.</p>"},{"location":"assignments/week11/#conclusion","title":"Conclusion","text":"<p>I was really confused about this week and how step response sensors worked at first, but with a couple of hours of rewatching Neil\u2019s lecture, looking at the examples, and analyzing diagrams, I was able to successfully make the sensor work partly. Eventually, after further debugging, I was able to make it work perfectly. The only problem was that it couldn\u2019t sense when objects were placed on the book and stayed there. I think that this week was very conducive to my final project since I now have one of the primary aspects done. I also have a newfound appreciation for step-response sensors, considering that they only need two electrodes, two resistors, and a microcontroller to function properly.</p>"},{"location":"assignments/week11/#credits","title":"Credits","text":"<p>Thanks to Mr. Durrett for helping me understand the logic behind step response better. All other credits are mentioned where they are used respectively.</p>"},{"location":"assignments/week12/","title":"12. Molding and Casting","text":"<p>This week I learned how to make molds and used different machines in the lab to create them.</p>"},{"location":"assignments/week12/#2-step-mold-cad-and-cam","title":"2-Step Mold CAD and CAM","text":"<p>I used Fusion to design my mold, as well as create the toolpath for it to be milled.</p> <p>To start, I wanted to make a 2-step mold. This would allow me to cast soft material (since the mold would be hard).</p>"},{"location":"assignments/week12/#designing-the-mold","title":"Designing the Mold","text":"<p>I wanted to make a basic design of the mask worn by the Knight in the video game Hollow Knight.</p> <p>To start the design, I obtained an image from the internet, traced it in a sketch, and extruded that sketch to create the mask. I also added some fillets to make the design smoother. Next, I created a rectangular prism for the actual mold, and I cut out the intersection between it and the mask (using the Combine tool in Fusion).</p> <p></p>"},{"location":"assignments/week12/#printing-the-mold-prusa-mini","title":"Printing the Mold (Prusa Mini)","text":"<p>At this point, I exported the design as an STL file and converted it to gcode for the Prusa Mini printer through PrusaSlicer. I sent the gcode to the printer, and there were no problems along the way.</p> <p></p> <p></p>"},{"location":"assignments/week12/#creating-toolpath","title":"Creating Toolpath","text":"<p>I also wanted to attempt to use my lab\u2019s milling machines to create a mold.</p> <p>I used the Manufacture workspace in Fusion to create the CAM toolpath. First, I defined a new setup and set the machine to a generic Autodesk 3-axis. I configured settings for the positions of the axes and origin.For the stock, since I wanted it to be approximately the same size as my designed mold, I used a relative size box with no offset from the mold box.</p> <p>Once the setup was configured, I made two toolpaths: one for a roughing pass and one for a finishing pass.</p> <p>For the roughing pass, I used a 3D adaptive clearing since my design has some rounded parts. I set the tool to a 1/8\u201d flat end mill (since it can easily remove a lot of material), and I set the maximum stepdown to 1 mm. I initially had an error that set that the toolpath was empty, but I fixed this when I realized that the stock went along the inside of the molding shape.</p> <p></p> <p>Next, I used a 3D contour path for the side finishing path and a 3D flat path for the bottom finishing path. I used a 1/16\u201d flat end mill tool, and I set the maximum roughing stepdown to 0.75 mm. These toolpaths did not take long to generate at all, and they had a very short run time (roughly 10 minutes combined).</p> <p></p>"},{"location":"assignments/week12/#exporting-toolpaths-and-milling","title":"Exporting Toolpaths and Milling","text":"<p>I used the NC Program tool in Fusion to export the toolpaths. I ensured that I set the machine to the Bantam Tools machine (since that was the one our lab had), named the files, and exported them as .gcode files.</p> <p>I planned on using my lab\u2019s milling machines to mill the design out of wax.</p> <p>I imported the toolpaths into the Bantam Tools software, and I milled them similarly to circuit boards from previous weeks. The only slight difference was that since the wax isn\u2019t conductive, I needed to measure the height manually with calipers.</p> <p>The milling process went smoothly.</p> <p></p>"},{"location":"assignments/week12/#3-step-mold-cad-and-cam","title":"3-Step Mold CAD and CAM","text":"<p>My instructor, Mr. Dubick, also wanted us to make a 3-step mold for this week. This would allow us to make a hard final cast (since the mold and cast should be opposites).</p>"},{"location":"assignments/week12/#designing-the-mold_1","title":"Designing the Mold","text":"<p>I first made a rectangular prism for the bottom of the mold. Next, I added the mask design to the top of it. Finally, I added sides to the mold that went higher than the mask in order to create a bottom part for the mold that would be casted from this mold.</p> <p></p> <p>I planned to use my lab\u2019s resin printer to print this as part of this week\u2019s group project.</p>"},{"location":"assignments/week12/#printing-the-mold","title":"Printing the Mold","text":"<p>I exported the .stl file for the 3 part mold from Fusion and followed a fairly similar process to the Prusa Minis to generate gcode for the Learned Fish Formlabs resin printer (using a different slicer).</p> <p>The printing process went somewhat well, but even after curing for a fair bit of time, the print was still slightly sticky. Also, the supports did not come out very nicely, so there were quite a few small support pieces still attached.</p> <p>Here is a picture of the mold (along with its soft cast):</p> <p></p>"},{"location":"assignments/week12/#casting-a-soft-piece","title":"Casting a Soft Piece","text":"<p>I used the mold printed by the Prusa Mini 3D printer for casting due to time constraints. When deciding which material I wanted to use for casting, I chose Smooth-On\u2019s Mold Star 15 Slow.</p> <p>To figure out the approximate volume of my mold for apportioning how much silicone I would need to fill it, I used the Fusion model. I right clicked on the mask model and checked its properties, and it stated that the volume of the mask was 0.77 in^3. I converted this to mL to get roughly 12.6 mL.</p> <p>Collin Kanofsky was also working on casting at the same time as me, so we collaborated throughout this process.</p> <p>I obtained the containers with Part A and Part B of Mold Star, and we mixed them well. For Mold Star, parts a and B have a 1:1 ratio, so to get how much of each part I needed, I just divided 12.6 by 2, getting approximately 6.3 mL of each part.</p> <p>After also accounting for Collin\u2019s necessary volume, we poured our combined amounts of Part A and B into two separate cups. Once our measurements for each part were correct, we poured the two parts together and stirred for some time.</p> <p>While this was happening, I also sprayed some mold release into my mold to allow for easy removal.</p> <p></p> <p>I poured the silicone mixture into my mold, and I made it so that it slightly overflowed (so the bottom of my cast could be even).</p> <p></p> <p>I then waited for the silicone to harden.</p> <p>Once hardened, I was able to take out the mold using a scraper tool. Since there was some overflow in the mold, there was some excess silicone that I needed to cut off.</p> <p></p> <p>Here is the cast after cutting excess off:</p> <p></p> <p></p> <p>We also had some excess silicone, so for fun, Collin and I made a smiley face.</p> <p></p>"},{"location":"assignments/week12/#casting-a-hard-piece","title":"Casting a Hard Piece","text":""},{"location":"assignments/week12/#soft-mold-from-resin-printed-part","title":"Soft Mold from Resin-Printed Part","text":"<p>I used the 3-part mold from the resin printer to create a hard mold. Since a hard cast cannot be made from a hard mold (because it would not be able to be removed), I needed to essentially cast a soft version of the 3D printed mold.</p> <p>I first cast the soft mold using Mold Star 15 Slow from the 3-part mold. Despite applying mold release, the soft mold did not come out well. It left some residue on the inside of the 3-part mold, and it seemed not to cure properly.</p> <p>Here is a picture of the soft mold:</p> <p></p>"},{"location":"assignments/week12/#hard-cast-from-soft-mold","title":"Hard Cast from Soft Mold","text":"<p>After letting the soft mold cure for a considerable amount of time, it eventually stopped being sticky. After that, I was able to cast the hard piece.</p> <p>As per the recommendation of some of my peers, I used Task 8 resin for the hard cast. In the datasheet, similarly to the Mold Star 15 Slow, there were parts A and B, and they needed to be mixed in a 1A:1B ratio.</p> <p>After mixing the two parts separately, I poured them together, mixed them, and quickly poured the mixture into my mold since it has a pot life of 2.5 minutes. The mixture hardened very quickly, and here is a video of it:</p> <p> The video is not supported in your browser. <p></p> <p>Here is the fully cured mixture in the mold:</p> <p></p> <p>Since the soft mold had imperfections from the resin mold, the hard cast came out with quite a few bumps. Here is the rough cast taken out of the mold:</p> <p></p> <p></p> <p>Since I wanted this cast to be displayed somewhere, I decided to make the cast smoother. To do this, I used sandpaper, starting from 100 grit and ending with 320 grit.</p> <p>Here is the fully polished piece. Note that it was hard to apply sandpaper to the corners and inside of the two holes.</p> <p></p> <p></p>"},{"location":"assignments/week12/#group-portion","title":"Group Portion","text":"<p>This week, I worked with Richard Shan. Our documentation can be found here.</p> <p>I helped to make comparisons between the Mold Star 15 Slow and TASK 8 products, and I also made casts with both of those products to be compared. </p> <p>I also contributed to the comparison between the different processes to make a mold.</p>"},{"location":"assignments/week12/#reflection","title":"Reflection","text":"<p>This week was not my favorite, but I did feel that learning how to make molds and cast using different materials is useful for future projects. At first, I struggled to understand why I needed a soft mold to make a hard cast, but I eventually figured out that it could simply not be removed. Also, this week improved my skills in 3D printing and using my lab\u2019s milling machines, since all of those processes were used to create molds and compare them. I also learned how to use my lab\u2019s resin 3D printer. Its jobs take a while to complete, but the product comes out fairly nicely.</p>"},{"location":"assignments/week12/#credits","title":"Credits","text":"<p>All credits are mentioned where they are used respectively.</p>"},{"location":"assignments/week13/","title":"13. Networking and Communications","text":"<p>This week, I worked on communication between several microcontrollers using the I2C protocol.</p> <p>You can find the files used for this week here.</p> <p>For my slave modules, I used the Connor Cruz 1.0 and 2.0 boards, which can be found in Week 8 and Week 9.</p>"},{"location":"assignments/week13/#master-board","title":"Master Board","text":"<p>Since I had used I2C in previous weeks for the OLED screen, and I wanted to include other modules along with it, I decided to network using I2C. I wasn\u2019t entirely sure of how it could communicate with multiple devices, so I looked at a couple of tutorials such as this one. </p>"},{"location":"assignments/week13/#designing-master","title":"Designing Master","text":"<p>Once I had a general idea of how I2C worked, I quickly designed a master board with multiple headers for SDA, SCL, 5V, and GND connected. I also included an LED to test reading from the slave modules. I used a Xiao RP2040 chip as the microcontroller because I plan to use that for my final project.</p> <p></p> <p></p> <p>Looking back at the board design, I probably should have placed the LED on an analog pin for easier reading of sensors, and I could have allowed more ports connected to headers to get more use out of the board. However, this would work well for the week.</p> <p>I milled and stuffed the board, and it seemed to work well. Here is the final board: The Flubben Master:</p> <p></p>"},{"location":"assignments/week13/#testing-and-programming","title":"Testing and Programming","text":"<p>I wanted to use my Connor Cruz 2.0 :) board and my Connor Cruz :) board to connect to the SDA and SCL lines the Xiao RP2040 was connected to. Alas, when I was handling the Connor Cruz 2.0, I accidentally removed one of the headers, which caused 3 pads to rip. Since they were connected to multiple traces, I decided to simply remake the board.</p> <p>Here is the board with ripped traces:</p> <p></p> <p>While that board was broken, I tried testing the Connor Cruz (1.0) with the Flubben Master. I needed to write code for both microcontrollers to determine their function. For both, I used the Wire library, which is a library for communication between I2C devices.</p> <p>For the master board, I wrote two separate functions depending on whether I wanted to receive input from the slave modules or output to the slave modules. I used the readSlave9() function to obtain data from the slave modules, and I used the writeSlaves() function to blink the slaves in order.</p> <p>For the slave boards, I assigned their addresses and assigned functions for both when data is sent from the slave and received by the slave. Specifically, I made the button send a boolean to the master module depending on whether it was pressed, and the writeSlaves() function on the master module determined the state of an LED on the slave modules.</p>"},{"location":"assignments/week13/#code","title":"Code","text":"<p>Master Code:</p> <pre><code>#include &lt;Wire.h&gt;\n\nint led = 3;\n\nvoid writeSlaves() {\n    Wire.beginTransmission(8);\n    Wire.write(1);\n    Wire.endTransmission();\n    Wire.beginTransmission(9);\n    Wire.write(0);\n    Wire.endTransmission();\n    delay(500);\n\n    Wire.beginTransmission(9);\n    Wire.write(1);\n    Wire.endTransmission();\n    Wire.beginTransmission(8);\n    Wire.write(0);\n    Wire.endTransmission();\n    delay(500);\n}\n\nvoid readSlave9() {\n    Wire.requestFrom(9, 1);\n\n    int receiveVal = Wire.read();\n    if (receiveVal == 1) digitalWrite(led, HIGH);\n    else digitalWrite(led, LOW);\n}\n\nvoid setup() {\n  Wire.begin();\n  pinMode(led, OUTPUT);\n}\n\nvoid loop() {\n  //Uncomment one of these depending on the desired function  \n  writeSlaves();\n  //readSlave9();\n}\n</code></pre> <p>Slave Input/Output Code:</p> <pre><code>#include &lt;Wire.h&gt;\nint output = 0;\n\nvoid setup() {\n  pinMode(4, OUTPUT);\n  pinMode(0, INPUT);\n\n  //Change the address for each slave board\n  Wire.begin(9);\n  Wire.onReceive(recieveData);\n  Wire.onRequest(sendData);\n}\nvoid loop() {\n  digitalWrite(4, output);\n  delay(100);\n}\n\nvoid recieveData() {\n  while (Wire.available())\n  {\n    output = Wire.read();\n  }\n}\n\nvoid sendData() {\n  bool buttonPressed = digitalRead(0);\n  if (buttonPressed) Wire.write(1);\n  else Wire.write(0);\n}\n</code></pre>"},{"location":"assignments/week13/#working-output-and-input","title":"Working Output and Input","text":"<p>Here is the working output:</p> <p> The video is not supported in your browser. <p></p> <p>Here is the working input:</p> <p> The video is not supported in your browser. <p></p>"},{"location":"assignments/week13/#group-portion","title":"Group Portion","text":"<p>I worked with Richard Shan this week. You can find our documentation here.</p> <p>For this week, I configured my board, which had a Xiao RP2040, to send a signal through I2C to turn on an LED on a slave board when power was supplied by Richard\u2019s ESP32. This was not too different from what I did in my individual section.</p> <p>I also helped with the design of the NPN transistor board, since although voltage was being supplied to my board from the ESP32, it was not a full 5V. Since my board used the 5V pin of the RP2040, we created a board using an NPN transistor to transmit 5V.</p>"},{"location":"assignments/week13/#reflection","title":"Reflection","text":"<p>This week was very interesting, and I feel that it will be very important to know in general. Since certain microcontrollers might not have enough ports for one\u2019s desired function, or they might not have enough memory to handle certain libraries, networking between several microcontrollers and output/input devices can help to solve those problems. I chose I2C since some of the sensors for my final project might involve them, but I primarily focused on networking between microcontrollers so that I could use the memory of a Xiao RP2040 chip with several other microcontrollers to allow for more available pins.</p> <p>Future Note: Later on, I did learn a couple of other protocols such as UART and SPI, but I2C definitely helped for my final project in that I needed to connect a Xiao RP2040 and ATTiny1614. Also, this work helped with troubleshooting TLE493D hall effect sensors since they were I2C components, but I eventually scrapped them.</p>"},{"location":"assignments/week13/#credits","title":"Credits","text":"<p>All credits are mentioned where they are used respectively.</p>"},{"location":"assignments/week14/","title":"14. Interface and Application Programming","text":"<p>This week I worked on creating an interface using MQTT.</p>"},{"location":"assignments/week14/#ideas-and-setup","title":"Ideas and Setup","text":""},{"location":"assignments/week14/#general-idea","title":"General Idea","text":"<p>I decided to use the Raspberry Pi Pico W for intefacing since my lab had recently had a couple of them imported, and I could use it to easily connect to WiFi.</p> <p>Here is a pinout I found on this website:</p> <p></p> <p>The idea of MQTT in Neil\u2019s lecture sounded like a fun idea to implement, so I chose to use MQTT for my interface. My instructor, Mr. Dubick, gave a very helpful link for starting out with MQTT at this link.</p>"},{"location":"assignments/week14/#setting-up-software","title":"Setting Up Software","text":"<p>I first obtained the Micropython firmware for my Pico W, which can be found here. I then connected the Pico W to my computer while holding the BOOTSEL button, and I imported the uf2 file onto the chip.</p> <p>The guide I used involved using Micropython with Thonny. Since I have not worked with Micropython before, I decided to try it out for the sake of learning it. In Thonny, I installed the umqtt.simple package, since it would allow me to use basic MQTT functions.</p> <p>After downloading Thonny, I also downloaded Eclipse Mosquitto, which would allow me to easily communicate with the established MQTT server.</p>"},{"location":"assignments/week14/#board-creation","title":"Board Creation","text":"<p>Since I had not used a Pico W before, I needed to make another board for it. I included the Pico W, a button, a programmable LED, and many connectable ports. Milling and stuffing the board was not too hard, but it was slightly annoying to get all of the headers on. Originally, I was planning to use all of the ports of the Pico W, but I realized that it would be unreasonable to fit that into one board.</p> <p>Here is the final board:</p> <p></p>"},{"location":"assignments/week14/#programming","title":"Programming","text":"<p>I created a new file on my Pico W named \u2018main.py\u2019. I wanted name it this because main.py runs automatically when power is supplied to the chip. This would allow me to simply plug it into an outlet (with an ACDC converter) and have the program run without any external input.</p> <p>The guide I used had most of what I needed to communicate, but I wanted to use a different server. I used the server that Neil linked in his presentation: mqtt.fabcloud.org</p> <p>This server also required extra steps for establishing a client connection: a username, password, and port. These had already been given, so I simply added them to the code.</p> <p>I then added a function to blink an LED whenever the message \u201cLED ON\u201d was published to the server. This was fairly simple, but I needed to learn how to communicate with pins in Micropython first. I also added a function to send a message to the server when a button was pressed.</p> <p>Here is my final code:</p> <pre><code>import network\nimport time\nfrom machine import Pin\nfrom umqtt.simple import MQTTClient\n\nwlan = network.WLAN(network.STA_IF)\nwlan.active(True)\nwlan.connect('SSID', 'SECURITY KEY')\n\ntime.sleep(5)\nprint('Connected:', wlan.isconnected())\n\nmqtt_server = 'mqtt.fabcloud.org'\nbroker_port = 1883\nclient_id = 'fabstudent'\nusername = 'fabacademy'\npassword = 'fabacademy'\ntopic = 'fabacademy'\n\nclient = MQTTClient(client_id, mqtt_server, port=broker_port,\n        user=username, password=password, keepalive=3600)\n\nledOn = False\nledPin = Pin(27, Pin.OUT)\nbuttonPin = Pin(0, Pin.IN)\n\ndef mqtt_connect():\n    try:\n        client.connect()\n        print('Broker connected successfully')\n    except Exception as e:\n        print('Failed broker connection: ', e)\n\ndef reconnect():\n    print('Reconnecting to broker')\n    time.sleep(5)\n    machine.reset()\n\ndef publish(topic, msg):\n    try:\n        client.publish(topic, msg)\n        print(f'Published {msg} to {topic}')\n    except Exception as e:\n        print('Error publishing to topic:', e)\n\ndef subscribe(topic):\n    try:\n        client.subscribe(topic)\n        print('Subscribed to topic:', topic)\n    except Exception as e:\n        print('Error subscribing to topic:', e)\n\ndef callback(topic, msg):\n    global ledOn\n    print(f'Received message on topic: {topic}; Message: {msg}')\n    if msg == b'LED ON':\n        ledOn = True\n\ndef ledBlink():\n    global ledOn\n    client.check_msg()\n    if ledOn:\n        print('ON')\n        ledPin.value(1)\n        time.sleep(0.5)\n        ledPin.value(0)\n        ledOn = False\n\ndef buttonPress():\n    buttonPressed = buttonPin.value()\n    if buttonPressed:\n        publish(topic, 'Button Pressed!')\n\ntry:\n    mqtt_connect()\n    client.set_callback(callback)\nexcept OSError as e:\n    reconnect()\n\nsubscribe(topic)\n\nwhile True:\n    #Uncomment one call depending on input or output\n    ledBlink()\n    #buttonPress()\n    time.sleep(0.1)\n</code></pre> <p>Here are the commands I used on my computer for the respective subscription to the server and publishing of the message \u201cLED ON\u201d:</p> <pre><code>mosquitto_sub -h mqtt.fabcloud.org -u fabacademy -P fabacademy -p 1883 -t fabacademy\n</code></pre> <pre><code>mosquitto_pub -h mqtt.fabcloud.org -u fabacademy -P fabacademy -p 1883 -t fabacademy -m \"LED ON\"\n</code></pre> <p>Here is the functioning LED blink. It successfully blinks the LED when \u201cLED ON\u201d is published to the server.</p> <p> The video is not supported in your browser. <p></p> <p>Here is the functioning button press. It successfully sends a message to the server when it is pressed.</p> <p> The video is not supported in your browser. <p></p>"},{"location":"assignments/week14/#server-interface","title":"Server Interface","text":"<p>After I got the transmission to and from the server to work, I created a GUI interface to interact with my board. I had used Tk in previous projects of mine, so I decided to use Tkinter with Python in Thonny.</p> <p>I used this guide to learn how to communicate with MQTT in Python, since I would have to use different packages than those used for the Pico W (since that was specifically configured for the microcontroller).</p> <p>Here are some aspects I included in the program: text boxes for the user to input the server information and desired message, a button to set those values to the configured values for my Connor Cruz 3.0 board, a button to publish the inputted message to the server, a text box showing the last 5 messages in the server, and a label showing whether the button is being pressed or not.</p> <p>Here is the code:</p> <pre><code>import tkinter as tk\nimport paho.mqtt.publish as publish\nimport paho.mqtt.client as mqtt\n\nlatestMessages = [\"\", \"\", \"\", \"\", \"\"]\n\ndef publishMessage():\n    host = hostInput.get()\n    topic = topicInput.get()\n    msg = messageInput.get()\n    port = portInput.get()\n    usrname = usernameInput.get()\n    pswd = passwordInput.get()\n    print(host, topic, msg, port, usrname, pswd)\n    publish.single(topic, msg, hostname=host, port=int(port), auth={'username': usrname, 'password': pswd})\n\ndef defaultSet():\n    hostInput.delete(0, tk.END)\n    hostInput.insert(0, \"mqtt.fabcloud.org\")\n    topicInput.delete(0, tk.END)\n    topicInput.insert(0, \"fabacademy\")\n    messageInput.delete(0, tk.END)\n    messageInput.insert(0, \"LED ON\")\n    portInput.delete(0, tk.END)\n    portInput.insert(0, \"1883\")\n    usernameInput.delete(0, tk.END)\n    usernameInput.insert(0, \"fabacademy\")\n    passwordInput.delete(0, tk.END)\n    passwordInput.insert(0, \"fabacademy\")\n\ndef onConnect(client, userdata, flags, rc):\n    if rc == 0:\n        print(\"Connected to broker\")\n        client.subscribe(\"fabacademy\")\n    else:\n        print(\"Connection to broker failed\")\n\ndef onMessage(client, userdata, msg):\n    global latestMessages\n    message = msg.payload.decode()\n    print(\"Received message:\", message)\n    latestMessage = message\n\n    for i in range(0, 4):\n        latestMessages[i] = latestMessages[i + 1]\n\n    latestMessages[4] = message\n    outputDisplay.delete(1.0, tk.END)\n    for i in latestMessages:\n        if i == \"\":\n            continue\n        outputDisplay.insert(tk.END, i + \"\\n\")\n\n    if latestMessage == \"Button Pressed!\":\n        buttonPressed.config(text=\"BUTTON PRESSED\")\n        buttonPressed.config(bg=\"lightgreen\")\n    elif latestMessage == \"Button Not Pressed!\":\n        buttonPressed.config(text=\"BUTTON NOT PRESSED\")\n        buttonPressed.config(bg=\"red\")\n\nroot = tk.Tk()\nroot.title(\"Connor Cruz 3.0 Interface\")\n\ninputFrame = tk.Frame(root)\ninputFrame.pack(side=tk.LEFT, padx=10)\n\nhostLabel = tk.Label(inputFrame, text=\"Host:\")\nhostLabel.grid(row=0, column=0)\nhostInput = tk.Entry(inputFrame, width=50)\nhostInput.grid(row=0, column=1)\n\ntopicLabel = tk.Label(inputFrame, text=\"Topic:\")\ntopicLabel.grid(row=1, column=0)\ntopicInput = tk.Entry(inputFrame, width=50)\ntopicInput.grid(row=1, column=1)\n\nmessageLabel = tk.Label(inputFrame, text=\"Message:\")\nmessageLabel.grid(row=2, column=0)\nmessageInput = tk.Entry(inputFrame, width=50)\nmessageInput.grid(row=2, column=1)\n\nportLabel = tk.Label(inputFrame, text=\"Port:\")\nportLabel.grid(row=3, column=0)\nportInput = tk.Entry(inputFrame, width=50)\nportInput.grid(row=3, column=1)\n\nusernameLabel = tk.Label(inputFrame, text=\"Username:\")\nusernameLabel.grid(row=4, column=0)\nusernameInput = tk.Entry(inputFrame, width=50)\nusernameInput.grid(row=4, column=1)\n\npasswordLabel = tk.Label(inputFrame, text=\"Password:\")\npasswordLabel.grid(row=5, column=0)\npasswordInput = tk.Entry(inputFrame, width=50)\npasswordInput.grid(row=5, column=1)\n\ndefaultButton = tk.Button(inputFrame, text=\"Connor Cruz 3.0 Default\", command=defaultSet, width=50)\ndefaultButton.grid(row=6, column=0, columnspan=2)\n\npublishButton = tk.Button(inputFrame, text=\"Publish\", command=publishMessage, width=50)\npublishButton.grid(row=7, column=0, columnspan=2)\n\noutputFrame = tk.Frame(root)\noutputFrame.pack(side=tk.RIGHT, padx=10, pady=10)\noutputLabel = tk.Label(outputFrame, text=\"Server Output (Most Recent Messages):\")\noutputLabel.grid(row=0)\noutputDisplay = tk.Text(outputFrame, width=50, height=5)\noutputDisplay.grid(row=1)\n\nbuttonFrame = tk.Frame(outputFrame)\nbuttonFrame.grid(row=2, pady=10)\n\nbuttonPressed = tk.Label(buttonFrame, width=58, height=5, text=\"BUTTON NOT PRESSED\", bg=\"red\")\nbuttonPressed.pack()\n\nclient = mqtt.Client()\nclient.on_connect = onConnect\nclient.on_message = onMessage\n\nclient.username_pw_set(username=\"fabacademy\", password=\"fabacademy\")\n\nclient.connect(\"mqtt.fabcloud.org\", 1883)\n\nclient.loop_start()\n\nroot.mainloop()\n</code></pre> <p>Here is the working program:</p> <p> The video is not supported in your browser. <p></p>"},{"location":"assignments/week14/#group-portion","title":"Group Portion","text":"<p>I worked with Richard Shan this week. Our documentation can be found here.</p> <p>We both worked to formulate a list of similarities and differences between our two projects this week. We compared both using Python and HTML to create our GUI interfaces, as well as comparing and contrasting the use of HTTP and MQTT for server management. We included topics such as accessibility to use these different methods and how reliable they are.</p>"},{"location":"assignments/week14/#reflection","title":"Reflection","text":"<p>This week was very fun, but it took a while to get the MQTT communication to work. I felt like it was a really important skill to learn since it made me consider both how to publish to a server and subscribe to lsiten to that server. The wireless communication also enlightened me on how to connect to WiFi from a microcontroller and allow for transmission without a direct connection. Overall, I think that creating GUIs in the future will be very useful, and I could possibly use this on the screen for my final project.</p>"},{"location":"assignments/week14/#credits","title":"Credits","text":"<p>Thanks to Mr. Dubick for compiling several easily accessible resources to learn how to use MQTT. All other credits are mentioned where they are used respectively.</p>"},{"location":"assignments/week15/","title":"15. Wildcard Week","text":"<p>This week I worked on using machine vision to generally detect objects from a camera.</p>"},{"location":"assignments/week15/#idea","title":"Idea","text":"<p>For this week, I have an interest in machine learning algorithms, so I decided to use Neil\u2019s suggestion of detecting objects.</p> <p>My general idea was to establish a server where an ESP32CAM module and a laptop to communicate through an MQTT server. The laptop would have a GUI where if a button is clicked, a message is sent to take a picture with the ESP32, and the data for that image is transferred through the server. The program on the laptop then uses the YOLO algorithm to detect objects, and the image is displayed with those elements modified.</p> <p>Here is a brief summary:</p> <ul> <li>Laptop sends message to server to take picture</li> <li>ESP32 takes picture</li> <li>ESP32 sends picture to server</li> <li>Laptop receives image</li> <li>Laptop detects objects</li> <li>Laptop displays image with detected objects</li> </ul>"},{"location":"assignments/week15/#programming-laptop-gui","title":"Programming Laptop GUI","text":""},{"location":"assignments/week15/#local-pictures","title":"Local Pictures","text":"<p>To start, I made some basic code for the laptop interface. Since I had already done this in Interfacing Week, I replicated most of the code with some changes to fit the program I wanted to create.</p> <p>To the program, I added the object detection features. I decided to use theYOLO algorithm.</p> <p>I used many sources for reference on this, including this one.</p> <p>For fun, I also allowed it to be able to detect objects on local image files. Here is an example:</p> <p> The video is not supported in your browser. <p></p>"},{"location":"assignments/week15/#esp32-pictures","title":"ESP32 Pictures","text":"<p>Next, I configured the program to handle pictures send to the MQTT stream by the ESP32. </p> <p>I first made a button to take a picture on the ESP32, which sent the message TAKE PICTURE to the MQTT server.</p> <p>I was unsure how to get started with this, but I looked at some forums and determined that the ESP32CAM has images stored in the byte array format. Since this could be quite large, I anticipated that I would have to chunk this data (with experimentation later, I decided to use a chunk size of 128).</p> <p>I wrote some code to join together the byte arrays from multiple messages. When the message START was published to the server, it would start detecting the individual chunks, and when END was published, it would stop detecting them and join them together to form the full byte array. Next, it would convert this to a blob, allowing it to be parsed by the YOLO algorithm.</p>"},{"location":"assignments/week15/#full-code","title":"Full Code","text":"<p>Here is all of my code for both of these segments:</p> <pre><code>import cv2\nimport numpy as np\nimport paho.mqtt.client as mqtt\nimport paho.mqtt.publish as publish\nimport tkinter as tk\nimport io\nfrom tkinter import filedialog\nfrom PIL import ImageTk, Image\n\nimg_label = None\ncomputerImage = True\n\nconfidenceValue = 0.6\n\ntransferImage = False\nbyteString = b\"\"\n\ndef imageDetect(blob, height, width, img):\n    global img_label, img_result\n\n    net = cv2.dnn.readNet(\"C:/FabAcademy/Week15/yolov3.weights\", \"C:/FabAcademy/Week15/yolov3.cfg\")\n    classes = []\n    with open(\"C:/FabAcademy/Week15/classes.txt\", \"r\") as f:\n        classes = [line.strip() for line in f.readlines()]\n\n    layer_names = net.getLayerNames()\n    output_layers = [layer_names[i - 1] for i in net.getUnconnectedOutLayers()]\n\n    net.setInput(blob)\n    outs = net.forward(output_layers)\n\n    class_ids = []\n    confidences = []\n    boxes = []\n    for out in outs:\n        for detection in out:\n            scores = detection[5:]\n            class_id = np.argmax(scores)\n            confidence = scores[class_id]\n            if confidence &gt; confidenceValue:\n                center_x = int(detection[0] * width)\n                center_y = int(detection[1] * height)\n                w = int(detection[2] * width)\n                h = int(detection[3] * height)\n\n                x = int(center_x - w / 2)\n                y = int(center_y - h / 2)\n\n                boxes.append([x, y, w, h])\n                confidences.append(float(confidence))\n                class_ids.append(class_id)\n\n    indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)\n\n    for i in range(len(boxes)):\n        if i in indexes:\n            x, y, w, h = boxes[i]\n            label = str(classes[class_ids[i]])\n            cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 2)\n            cv2.putText(img, label, (x, y + 30), cv2.FONT_HERSHEY_PLAIN, 3, (0, 255, 0), 3)\n\n    img_result = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    img_result = Image.fromarray(img_result)\n    img_result = ImageTk.PhotoImage(img_result)\n\n    if img_label is None:\n        img_label = tk.Label(root, image=img_result)\n        img_label.grid(row=4, column=1, columnspan=2)\n    else:\n        img_label.configure(image=img_result)\n        img_label.image = img_result\n\n    objectFound = False\n    for i in class_ids:\n        label = str(classes[i])\n        if label == objectInput.get():\n            publish.single('fabacademy', 'LED ON', hostname='mqtt.fabcloud.org', port=1883, auth={'username': 'fabacademy', 'password': 'fabacademy'})\n            objectFound = True\n            foundLabel.config(text=\"OBJECT FOUND!\")\n            print(\"LED ON\")\n            break\n    if not objectFound:\n        print(\"LED OFF\")\n        foundLabel.config(text=\"OBJECT NOT FOUND\")\n        print(\"Object not found\")\n\ndef onConnect(client, userdata, flags, rc):\n    if rc == 0:\n        print(\"Connected to broker\")\n        client.subscribe(\"fabacademy\")\n    else:\n        print(\"Connection to broker failed\")\n\ndef onMessage(client, userdata, msg):\n    global byteString, transferImage\n\n    if msg.payload == b\"START\":\n        print(\"STARTED\")\n        byteString = b\"\"\n        transferImage = True\n    elif msg.payload == b\"END\":\n        print(\"ENDED\")\n        if transferImage:\n            try:\n                img = Image.open(io.BytesIO(byteString))\n                img = img.resize((int(img.size[0] * 0.4), int(img.size[1] * 0.4)))\n                width, height = img.size\n\n                blob = cv2.dnn.blobFromImage(np.array(img), 0.00392, (416, 416), (0, 0, 0), True, crop=False)\n\n                imageDetect(blob, height, width, np.array(img))\n            except Exception as e:\n                print(\"Error:\", e)\n        transferImage = False\n    else:\n        if transferImage:\n            byteString += msg.payload\n\n\ndef computerGet():\n    computerImage = True\n    file_path = filedialog.askopenfilename()\n    if file_path:\n        img = cv2.imread(file_path)\n        img = cv2.resize(img, None, fx=0.4, fy=0.4)\n        height, width, channels = img.shape\n\n        blob = cv2.dnn.blobFromImage(img, 0.00392, (416, 416), (0, 0, 0), True, crop=False)\n\n        imageDetect(blob, height, width, img)\n        return \"Obtained image from path\"\n    else:\n        return \"Failed to get image from path\"\n\ndef espGet():\n    computerImage = False\n    publish.single('fabacademy', 'TAKE PICTURE', hostname='mqtt.fabcloud.org', port=1883, auth={'username': 'fabacademy', 'password': 'fabacademy'})\n\nroot = tk.Tk()\nroot.title(\"Object Detection Program\")\nroot.geometry(\"500x500\")\n\ncomputerButton = tk.Button(root, text=\"Detect Objects from Computer\", command=computerGet)\ncomputerButton.grid(row=1, column=1, padx=20, pady=10)\ncameraButton = tk.Button(root, text=\"Detect Objects from Camera\", command=espGet)\ncameraButton.grid(row=1, column=2, padx=20, pady=10)\n\nobjectLabel = tk.Label(root, text=\"Desired Object:\")\nobjectLabel.grid(row=2, column=1, padx=20, pady=10)\nobjectInput = tk.Entry(root, width=50)\nobjectInput.grid(row=2, column=2, padx=20, pady=10)\n\nfoundLabel = tk.Label(root, text=\"OBJECT FOUND STATUS\")\nfoundLabel.grid(row=3, column=1, columnspan=2, padx=20, pady=10)\n\nclient = mqtt.Client()\nclient.on_connect = onConnect\nclient.on_message = onMessage\n\nclient.username_pw_set(username=\"fabacademy\", password=\"fabacademy\")\n\nclient.connect(\"mqtt.fabcloud.org\", 1883)\n\nclient.loop_start()\n\nroot.mainloop()\n</code></pre>"},{"location":"assignments/week15/#programming-the-esp32","title":"Programming the ESP32","text":"<p>Here is an image of my ESP32CAM:</p> <p></p>"},{"location":"assignments/week15/#attempting-to-use-micropython","title":"Attempting to use Micropython","text":"<p>Originally, I had tried using Micropython to upload code to the ESP32, but even after downloading and uploading the correct firmware from this repo, it produced this error:</p> <pre><code>Couldn't find the device automatically. \nCheck the connection (making sure the device is not in bootloader mode) or choose\n\"Configure interpreter\" in the interpreter menu (bottom-right corner of the window)\nto select specific port or another interpreter.\n\nProcess ended with exit code None.\n</code></pre>"},{"location":"assignments/week15/#changing-methods","title":"Changing Methods","text":"<p>I couldn\u2019t figure out how to fix this, so by the suggestion of my colleague Richard Shan, who had worked with the ESP32CAM before, I used Arduino to program it.</p> <p>I tried using ArduinoMQTTClient for a while, but I couldn\u2019t get that to work at all no matter how much I debugged. Eventually, I settled for another library.</p> <p>This guide really helped me to learn how to use PubSubClient for MQTT in Arduino.</p> <p>I wrote code to connect the ESP to a WiFi network and the MQTT server, which was successful. I set a callback function which would run whenever a message was received on the server. In the callback function, I checked whether the message read \u201cTAKE PICTURE\u201d, and if it did, the captureAndSendMessage() function would be called.</p> <p>I needed to research how to traverse a byte array, and I was eventually able to write this code segment to take the picture and publish its data as a byte array to the MQTT stream. For some reason, chunk sizes of powers of 2 greater than 128 bytes did not work, so I stuck with that chunk size. Here is the segment:</p> <pre><code>camera_fb_t *fb = esp_camera_fb_get();\n  if (!fb) {\n    Serial.println(\"Camera capture failed\");\n    return;\n  }\n\n  Serial.printf(\"Captured image with size %u\\n\", fb-&gt;len);\n\n  // Publish image bytes to MQTT server in chunks\n  const int chunkSize = 128;\n  int remaining = fb-&gt;len;\n  byte* bufferPointer = fb-&gt;buf;\n  mqttClient.publish(mqtt_topic, \"START\");\n  Serial.println(\"STARTED\");\n  while (remaining &gt; 0) {\n    int chunkLength = min(remaining, chunkSize);\n    if (!mqttClient.publish(mqtt_topic, (unsigned char *)bufferPointer, chunkLength)) {\n      Serial.println(\"Failed to publish image\");\n      mqttClient.publish(mqtt_topic, \"END\");\n      break;\n    }\n    bufferPointer += chunkLength;\n    remaining -= chunkLength;\n  }\n  mqttClient.publish(mqtt_topic, \"END\");\n  Serial.println(\"ENDED\");\n</code></pre> <p>For a long time, I struggled to get the message to actually publish. I realized that the problem was that I had not converted the bufferPointer to an unsigned character pointer, which is the data type specified in the PubSubClient documentation.</p>"},{"location":"assignments/week15/#working-transfer","title":"Working Transfer","text":"<p>Note: Here are some examples of images taken and a video of the process:</p> <p> The video is not supported in your browser. <p></p> <p></p> <p></p>"},{"location":"assignments/week15/#full-code_1","title":"Full Code","text":"<p>Here is the full code for the ESP32CAM. Pin definition and configuration was obtained from Richard Shan on his documentation:</p> <pre><code>#include &lt;WiFi.h&gt;\n#include &lt;PubSubClient.h&gt;\n#include \"esp_camera.h\"\n\nconst char* ssid = \"SSID\";\nconst char* password = \"SECURITY KEY\";\n\nconst char* mqtt_server = \"mqtt.fabcloud.org\";\nconst int mqtt_port = 1883;\nconst char* mqtt_user = \"fabacademy\";\nconst char* mqtt_password = \"fabacademy\";\nconst char* mqtt_topic = \"fabacademy\";\n\n// Pin definition for ESP32CAM\n#define PWDN_GPIO_NUM     32\n#define RESET_GPIO_NUM    -1\n#define XCLK_GPIO_NUM     0\n#define SIOD_GPIO_NUM     26\n#define SIOC_GPIO_NUM     27\n\n#define Y9_GPIO_NUM       35\n#define Y8_GPIO_NUM       34\n#define Y7_GPIO_NUM       39\n#define Y6_GPIO_NUM       36\n#define Y5_GPIO_NUM       21\n#define Y4_GPIO_NUM       19\n#define Y3_GPIO_NUM       18\n#define Y2_GPIO_NUM       5\n#define VSYNC_GPIO_NUM    25\n#define HREF_GPIO_NUM     23\n#define PCLK_GPIO_NUM     22\n\nWiFiClient espClient;\nPubSubClient mqttClient(espClient);\n\nvoid setup() {\n  Serial.begin(9600);\n\n  WiFi.begin(ssid, password);\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n  Serial.println(\"\\nWiFi connected\");\n\n  mqttClient.setServer(mqtt_server, mqtt_port);\n  mqttClient.setCallback(messageReceived);\n\n  while (!mqttClient.connected()) {\n    Serial.print(\"Attempting MQTT connection...\");\n    if (mqttClient.connect(\"ESP32-CAM\", mqtt_user, mqtt_password)) {\n      Serial.println(\"connected\");\n      mqttClient.subscribe(mqtt_topic);\n    } else {\n      Serial.print(\"failed, rc=\");\n      Serial.print(mqttClient.state());\n      Serial.println(\" retrying in 5 seconds\");\n      delay(5000);\n    }\n  }\n\n  camera_config_t config;\n  config.ledc_channel = LEDC_CHANNEL_0;\n  config.ledc_timer = LEDC_TIMER_0;\n  config.pin_d0 = Y2_GPIO_NUM;\n  config.pin_d1 = Y3_GPIO_NUM;\n  config.pin_d2 = Y4_GPIO_NUM;\n  config.pin_d3 = Y5_GPIO_NUM;\n  config.pin_d4 = Y6_GPIO_NUM;\n  config.pin_d5 = Y7_GPIO_NUM;\n  config.pin_d6 = Y8_GPIO_NUM;\n  config.pin_d7 = Y9_GPIO_NUM;\n  config.pin_xclk = XCLK_GPIO_NUM;\n  config.pin_pclk = PCLK_GPIO_NUM;\n  config.pin_vsync = VSYNC_GPIO_NUM;\n  config.pin_href = HREF_GPIO_NUM;\n  config.pin_sscb_sda = SIOD_GPIO_NUM;\n  config.pin_sscb_scl = SIOC_GPIO_NUM;\n  config.pin_pwdn = PWDN_GPIO_NUM;\n  config.pin_reset = RESET_GPIO_NUM;\n  config.xclk_freq_hz = 20000000;\n  config.frame_size = FRAMESIZE_UXGA;\n  config.pixel_format = PIXFORMAT_JPEG; \n  config.grab_mode = CAMERA_GRAB_WHEN_EMPTY;\n  config.fb_location = CAMERA_FB_IN_PSRAM;\n  config.jpeg_quality = 12;\n  config.fb_count = 1;\n\n  if (psramFound()) {\n    config.jpeg_quality = 10;\n    config.fb_count = 2;\n    config.grab_mode = CAMERA_GRAB_LATEST;\n  }\n\n  esp_err_t err = esp_camera_init(&amp;config);\n  if (err != ESP_OK) {\n    Serial.printf(\"Camera init failed with error 0x%x\", err);\n    return;\n  }\n\n  Serial.println(\"Camera initialized successfully\");\n}\n\nvoid loop() {\n  if (!mqttClient.connected()) {\n    reconnect();\n  }\n  mqttClient.loop();\n  delay(500);\n}\n\nvoid reconnect() {\n  while (!mqttClient.connected()) {\n    Serial.print(\"Attempting MQTT connection...\");\n    if (mqttClient.connect(\"ESP32-CAM\", mqtt_user, mqtt_password)) {\n      Serial.println(\"connected\");\n      mqttClient.subscribe(mqtt_topic);\n    } else {\n      Serial.print(\"failed, rc=\");\n      Serial.print(mqttClient.state());\n      Serial.println(\" retrying in 5 seconds\");\n      delay(5000);\n    }\n  }\n}\n\nvoid messageReceived(char* topic, byte* payload, unsigned int length) {\n  Serial.println(\"Message received\");\n  String receivedMessage = \"\";\n  for (int i = 0; i &lt; length; i++) {\n    receivedMessage += (char)payload[i];\n  }\n\n  if (receivedMessage == \"TAKE PICTURE\") {\n    captureAndSendImage();\n  }\n}\n\nvoid captureAndSendImage() {\n  camera_fb_t *fb = esp_camera_fb_get();\n  if (!fb) {\n    Serial.println(\"Camera capture failed\");\n    return;\n  }\n\n  Serial.printf(\"Captured image with size %u\\n\", fb-&gt;len);\n\n  const int chunkSize = 128;\n  int remaining = fb-&gt;len;\n  byte* bufferPointer = fb-&gt;buf;\n  mqttClient.publish(mqtt_topic, \"START\");\n  Serial.println(\"STARTED\");\n  while (remaining &gt; 0) {\n    int chunkLength = min(remaining, chunkSize);\n    if (!mqttClient.publish(mqtt_topic, (unsigned char *)bufferPointer, chunkLength)) {\n      Serial.println(\"Failed to publish image\");\n      mqttClient.publish(mqtt_topic, \"END\");\n      break;\n    }\n    bufferPointer += chunkLength;\n    remaining -= chunkLength;\n  }\n  mqttClient.publish(mqtt_topic, \"END\");\n  Serial.println(\"ENDED\");\n\n  esp_camera_fb_return(fb);\n}\n</code></pre>"},{"location":"assignments/week15/#reflection","title":"Reflection","text":"<p>This week was very fun, but it took quite a while and many different methods to resolve the problems I had. Since this topic is completely new to me, I had to constantly debug, and most of it was quite frustrating. However, after fixing everything, I feel like I have learned much more about servers, how AI image detection works, and improved my coding skills in Python and C++. Overall, this seems like an interesting thing to pursue further at a later time.</p>"},{"location":"assignments/week15/#credits","title":"Credits","text":"<p>Thanks to Richard Shan for suggesting and giving advice on the ESP32CAM chip. All other credits are mentioned where they are used respectively.</p>"},{"location":"assignments/week16/","title":"16. Applications and Implications","text":"<p>This week I worked on formalizing the requirements and specifications of my final project.</p>"},{"location":"assignments/week16/#design","title":"Design","text":"<p>My final project will consist of a wooden board that is about 16\u201d x 24\u201d, with a depth of about 4\u201d. It will be hollow in order to allow storage of electronic components inside. Embedded in the top piece of wood will be an acrylic cutout of Guam, and on it will be visual representations of different locations. There will also be a TFT screen embedded on the top. There will also be a separate piece in the shape of a latte stone with an embedded magnet.</p>"},{"location":"assignments/week16/#functionality","title":"Functionality","text":"<p>When the main board is given power, it will check if the piece is placed on any of the locations via magnetic hall sensors placed below the acrylic. Depending on the location where the piece is placed, the screen will display an image and description of that location and some of the local legends.</p>"},{"location":"assignments/week16/#what-has-been-done-beforehand","title":"What Has Been Done Beforehand?","text":"<p>One project that is very similar to mine is Elaine Liu\u2019s final project. It consists of a map of the world with sensors such that when they are pressed, display the continent name and pictures of a sister school in that continent. This project has been a constant help throughout the development of my project since it has many similar elements and processes involved.</p>"},{"location":"assignments/week16/#what-will-i-design","title":"What Will I Design?","text":"<p>I will design the main PCB which will hold the ATTiny1614 and Xiao RP2040, as well as the breakout boards to contain the hall effect sensors. I will cut out the acrylic design and design the path to make the main box. I will be making the different labels. I will write the text for each location, but the images will be obtained from various sources with permission.</p>"},{"location":"assignments/week16/#materials-and-components","title":"Materials and Components","text":""},{"location":"assignments/week16/#involved-components","title":"Involved Components","text":"<p>The primary board will be made of plywood, and the cutout of guam will be made of green acrylic. In terms of electronics, the project will include a TFT screen, Xiao RP2040 as the main board, 6 hall effect sensors (changed to 4), an ATTiny1614 for sensors, wires for connecting the components, and a AA battery pack for power. It will also have PCBs to contain the mentioned chips. The latte stone piece will be 3D printed, and there will be an embedded magnet.</p>"},{"location":"assignments/week16/#where-will-they-come-from","title":"Where Will They Come From?","text":"<p>The plywood might be able to come from the lab, but it can also be obtained from a local Lowe\u2019s hardware store. The acrylic will be ordered from Amazon, as well as the TFT screen. Our lab contains Xiao RP2040 chips and ATTiny1614s as well, so that will be able to be obtained easily. Our lab also has wires and battery packs. The PCBs can be designed with milling machines in the lab.</p>"},{"location":"assignments/week16/#costs","title":"Costs","text":"<p>Here is my final project Bill of Materials, which is also linked on my final project page.</p> <p></p> <p>Projected cost including components in lab: $91.88</p> <p>Projected cost without components in lab: $58.47</p>"},{"location":"assignments/week16/#processes-used","title":"Processes Used","text":"<ul> <li>Cutting with ShopBot CNC Machine: Making the Wooden Frame and Guam outline</li> <li>Milling Machine: Creating PCBs for different chips</li> <li>3D Printing: Creating the latte stone piece</li> <li>Laser Cutting: Engraved title on top and cutting acrylic</li> <li>Vinyl Cutting: Creating labels for each location</li> </ul>"},{"location":"assignments/week16/#questions-left","title":"Questions Left","text":"<p>I was able to talk with Dr. Adam Harris, who provided insight into how I should handle the electronics for my project. I need to figure out how networking with SPI works since the TFT screen I selected uses it. Also, I need to determine ways to affix the acrylic cutout of Guam, the screen, and the sensor board to the top of the wooden frame.</p>"},{"location":"assignments/week16/#how-will-it-be-evaluated","title":"How Will It Be Evaluated?","text":"<p>The project will be successful if it is able to display the correct image and text for each location on the screen for each of the sensors in a reasonable amount of time. It should not display any new locations if the piece is placed on none of the sensors. Also, the latte stone piece should be the only thing that triggers the sensors (except for other magnetic objects). The locations on the map should be easily identified and be correctly placed above their respective sensors.</p>"},{"location":"assignments/week17/","title":"17. Project Development","text":"<p>This is an account of progress during the final week of Fab Academy.</p>"},{"location":"assignments/week17/#completed-tasks","title":"Completed Tasks","text":"<p>Before this week, I was able to have the screen functioning and displaying images on the SD card. I also had files for all of my cuts, including the CNC file for the board outline and the cut for the Guam acrylic and its slot. I had also already cut out the outer box for the board, but I had not yet cut out Guam. I had started designing labels for locations, which I planned to vinyl cut. (Note that I documented this on the week of May 29th). </p> <p>I also tried testing the TLE493D hall effect sensors, which worked alone but not with an I2C multiplexer. Along with the screen functioning, I also had the information and images that would be displayed on the screen.</p>"},{"location":"assignments/week17/#remaining-tasks","title":"Remaining Tasks","text":"<p>I still had to actually cut the outline of Guam in both the acrylic and the top wood piece. I was still unsure of whether to cut it with the ShopBot CNC machine or the laser cutter, since it would be difficult for the ShopBot to cut the sharp parts of the outline in the wood, and the laser cutter would nto be able to cut a specific depth with its deep engrave. The acrylic for cutting out Guam had not arrived yet as well. I also needed to finish programming the sensors and assembling everything.</p>"},{"location":"assignments/week17/#what-hashasnt-worked","title":"What Has/Hasn\u2019t Worked","text":"<p>I had to go through two different screens. I was able to get one for the Arduino Mega 2560 to work with it, but I couldn\u2019t use it with other chips, so I wanted to get a screen that could possibly work with smaller chips. Eventually, I found a screen that was able to work with the Xiao RP2040, which you can find in my Final Project documentation. So far, having multiple TLE493D hall effect sensors has not worked, so I plan to test out new sensors. Everything else is going well.</p>"},{"location":"assignments/week17/#questions-remaining","title":"Questions Remaining","text":"<p>How can I get the current hall effect sensors to work, and if I can\u2019t, then what new ones can I have ship on time and get to work?</p> <p>Should I laser cut or CNC the cutout for Guam?</p> <p>If I end up not using the I2C hall effects, will I have enough pins on the Xiao to support all of the sensors?</p>"},{"location":"assignments/week17/#plans-for-remaining-time","title":"Plans for Remaining Time","text":"<p>Here are the remaining tasks and the approximate time they should take up. Note that they are in roughly chronological order.</p> <p>General:</p> <ul> <li>Test new sensors: 2-3 hours</li> <li>Design sensor board: 30 minutes</li> <li>Assemble sensor boards x 8: 1 hour</li> <li>Cut Guam outline in wooden board: 2 hours</li> <li>Cut spare top of box in case of failure: 30 minutes</li> <li>Cut Guam acrylic with cardboard: 30 minutes</li> <li>Cut Guam acrylic on scrap acrylic: 30 minutes</li> <li>Cut Guam acrylic in Green: 10 minutes</li> <li>Design main board for microcontroller(s): 1 hour</li> <li>Mill main board: 45 minutes</li> <li>Test main board: 1 hour</li> <li>Laser cut project name on board: 30 minutes</li> <li>Program sequence of pictures for each sensor: 3 hours</li> <li>Connect a power source to main board: 1 hour</li> </ul> <p>Assembly</p> <ul> <li>Glue sides and bottom of box: 45 minutes</li> <li>Affix acrylic Guam to board: 15 minutes</li> <li>Affix display to board: 15 minutes</li> <li>Affix sensor boards to acrylic: 15 minutes</li> <li>Affix main board to top of box: 10 minutes</li> <li>Affix power source to top of box: 20 minutes</li> <li>Cut stickers for board: 1.5 hours</li> <li>Affix stickers: 1 hour</li> </ul>"},{"location":"assignments/week17/#what-have-i-learned","title":"What Have I Learned?","text":"<p>I have definitely learned a lot more about different protocols. Dr. Adam Harris helped me understand I2C in more depth, as well as teaching me how to use a logic analyzer to see where communications might go wrong and to generally analyze communication between devices. Programming the screen has also taught me the SPI protocol. I have also learned that things might not go according to plan and that many problems might arise, so I need to give myself extra time in future projects to account for this.</p> <p>Note: You can see my detailed documentation on my Final Project page.</p>"},{"location":"assignments/week18/","title":"18. Invention, Intellectual Property, and Income","text":"<p>This week I worked on future plans for my final project and how I want it to be distributed.</p>"},{"location":"assignments/week18/#licensing-and-copyright","title":"Licensing and Copyright","text":"<p>To decide which license I wanted, I looked at a helpful libguide.</p> <p>I would prefer a Creative Commons license since it keeps the project open source and is very commonly used. I want attribution to my project if it is used anywhere, so I would like to apply the BY component. I also do not want others to profit off of my design, nor do I want any derivative works to be made, so I decided on the NC and ND components.</p> <p>Thus, the license I wish to apply to my project is:</p> <p>CC-BY-NC-ND 4.0</p> <p>which is fully known as:</p> <p>ATTRIBUTION-NONCOMMERCIAL-NODERIVS 4.0 INTERNATIONAL</p> <p>Specific details on this license can be found here.</p>"},{"location":"assignments/week18/#dissemination-plan","title":"Dissemination Plan","text":"<p>I plan to distribute my project to families who want to teach their children about Guam\u2019s culture, national parks in Guam, and schools in Guam in order to keep the culture alive. This will help to achieve my overall goal of linking the present and future generations to Guam\u2019s past culture which might not necessarily be taught in schools. The project might also be distributed to United States schools for the purpose of spreading the culture not just to children in Guam but also to more demographics. This might also help to reach the diaspora of Guam who are not as involved in Chamorro culture.</p> <p>To start with this plan, I could propose this project to relatives who live in and out of Guam, and they could in turn help to promote it to Guam officials. Although only one model is made, it might be able to be displayed in some park. In terms of making other boards, it might take some work for consistent output, and it would be a fairly laborious task.</p>"},{"location":"assignments/week18/#future-possibilities","title":"Future Possibilities","text":"<p>In the future, I could improve upon this project by adding more sensors and using a larger screen and map of Guam. I can decrease the size of the box I used since I ended up attaching the electronics all to the top face, and I will increase the size of Guam to allow for the larger amount of sensors. This is fairly reasonable to do, but I would have to change the parameters in my box design and cut everything again. This would require buying many of the materials again that were listed in my BOM, but it is fairly doable. Adding more sensors would require rerouting or possibly multiple ATTiny1614s (or a chip with a greater amount of pins), all connected through the same I2C line. Note that this would make the wiring messier, and I might need to find a better way to wire the sensors (since each one requires power, ground, and analog input lines).</p>"},{"location":"assignments/week18/#slide-and-video","title":"Slide and Video","text":"<p> The video is not supported in your browser. <p></p>"},{"location":"projects/final-project/","title":"Final Project - Na\u2019dan\u00f1a\u2019 Guam","text":"<p>Licensed under Creative Commons CC-BY-NC-ND 4.0</p>"},{"location":"projects/final-project/#slide-and-video","title":"Slide and Video","text":"<p> The video is not supported in your browser. <p></p>"},{"location":"projects/final-project/#files","title":"Files","text":"<p>You can find the files used for this project here.</p>"},{"location":"projects/final-project/#overview","title":"Overview","text":"<p>My final project idea is designed to help teach the culture of my home island, Guam, to those who do not know as much about it.</p> <p>The project consists of a 16\u201d x 24\u201d board that has an OLED screen along with an acrylic map of Guam. To accompany the board, there will also be a piece similar to a chess pawn in the shape of a latte stone, a cultural symbol.</p> <p>The island of Guam has sensors at several cultural landmarks marked by a star, and when the latte stone is placed on those sensors, the sensor on the board will cause the screen to display an image of the landmark and toggle through some text about its history and images of the place.</p>"},{"location":"projects/final-project/#system-diagram","title":"System Diagram","text":""},{"location":"projects/final-project/#bill-of-materials","title":"Bill of Materials","text":""},{"location":"projects/final-project/#general-idea-sketch","title":"General Idea Sketch","text":""},{"location":"projects/final-project/#list-of-tasks-to-be-completed","title":"List of Tasks to be Completed","text":"<p>Here is a list of general tasks to be completed and the respective skills they incorporate.</p> <p>Electronics:</p> <ul> <li>Make main board for Xiao RP2040 (Electronics Design/Production)</li> <li>Connect and program OLED screen to display certain images (Networking)</li> <li>Design and assemble board for sensors (lectronics Design/Production)</li> <li>Program sensors and test them through acrylic (Embedded Programming)</li> </ul> <p>Board:</p> <ul> <li>Make a vector file containing designs for the wooden container (Computer-aided Design)</li> <li>Cut the file using the large CNC machine and sand pieces (Computer-controlled Machining)</li> <li>Cut acrylic shape of Guam (Computer-controlled Cutting/Laser Cutter)</li> <li>Cutting stickers for the board (Computer-controlled Cutting/Vinyl Cutter)</li> <li>Engraving project name on board (Computer-controlled Cutting/Laser Cutter)</li> </ul> <p>General:</p> <ul> <li>Design piece with embedded magnet (3D Printing)</li> </ul> <p>Assembly:</p> <ul> <li>Fix screen and acrylic to top wood piece</li> <li>Place sides onto container</li> <li>Affix RP2040 board and sensor board</li> <li>Make hole for power source in one side and assemble all wood pieces</li> </ul>"},{"location":"projects/final-project/#initial-gantt-chart-for-tasks","title":"Initial Gantt Chart for Tasks","text":""},{"location":"projects/final-project/#marker-design-in-fusion-360-and-3d-printing","title":"Marker Design in Fusion 360 and 3D Printing","text":"<p>This is the design of the marker that was to be placed on the board. I first designed it in CAD week (Week 2). Here is the initial design I made:</p> <p></p> <p>For my final design, I made the bottom of the piece closed and made a hole shaped for a magnet in the middle of the piece. I planned to have the 3D printing job pause and insert the magnet, then continue the job. One slight problem was that supports would be required to have a slot for the magnet, so I made a chamfer above the magnet so that it would still not rattle around when the piece is shaken and so that supports would not be required. Here is the final piece design:</p> <p></p> <p>Here is the printed piece:</p> <p></p>"},{"location":"projects/final-project/#board-outline-design-and-cutting","title":"Board Outline Design and Cutting","text":""},{"location":"projects/final-project/#cuttle-design","title":"Cuttle Design","text":"<p>I planned to use a ShopBot or some other CNC machine to cut the board using this Cuttle file. This was later imported into Fusion, and a couple of elements were resized to better fit the final design.</p> <p></p>"},{"location":"projects/final-project/#fusion-design","title":"Fusion Design","text":"<p>For my cut on the CNC machine, I decided to design the different piece outlines as part of a Fusion file so I could see how they all fit together. To hold them together, I used finger joints (but they would also be joined together by glue). The design was not too hard to design since I only needed to make two sketches for the sides and one for the top and bottom.</p> <p>For a better depiction of my final, I also applied materials to the design so that they could emulate roughly what my design would actually look like. Here is the final design.</p> <p></p>"},{"location":"projects/final-project/#aspire-file-and-toolpath","title":"Aspire File and Toolpath","text":"<p>I imported the sketches from Fusion as DXF files into Aspire. Since I used a 3/8\u201d flat end tool for the cut, I also added dog bone fillets on inner right angles in my design to allow for them to fit together successfully during assembly.</p> <p>Here is a picture of the piece vectors in Aspire:</p> <p></p>"},{"location":"projects/final-project/#cutting-with-shopbot-cnc-machine","title":"Cutting with ShopBot CNC Machine","text":"<p>The cutting process was essentially the same as that of Computer-Controlled Machining week (Week 7). Nothing went too badly during the process. Here is a video of the cut:</p> The video is not supported in your browser."},{"location":"projects/final-project/#wood-guam-pocket-and-acrylic-inlay-cutting","title":"Wood Guam Pocket and Acrylic Inlay Cutting","text":""},{"location":"projects/final-project/#pocket-in-wood","title":"Pocket in Wood","text":"<p>Since my acrylic was 1/8\u201d and my wood was 1/2\u201d in thickness, I needed to find some way to inlay the acrylic cutout of Guam such that it could be approximately even with the surface of the wood. One slight problem that will be evident later is that the hall effect sensors I would use were not very reliable past 1/2\u201d distance, so I would prefer to have the sensors as close to the acrylic as possible.</p> <p>I came up with a solution where there would be a full cutout of Guam offset approximately 5 mm inwards and a pocket cut of the actual outline around that profile cut. Note that I made the pocket cut 1/8\u201d deep, as that was how large the acrylic was. It would have been problematic if there were some error in the machine, but luckily, as seen in the next section, the inlay fit almost perfectly. Here are pictures of the Aspire toolpath and simulation.</p> <p></p> <p></p> <p>One slight problem was that I had already cut out the outline of the top piece, so I needed to find some way of fixturing it without breaking the material. To resolve this problem, I used my lab\u2019s Nitto double-sided tape. This was a slightly dangerous process, so I needed to make sure that I had an adequate amount and that it was pressed onto the bed firmly enough.</p> <p>I followed roughly the same steps as cutting the board outline, and the cut thankfully ran successfully.</p> <p>Here are a video of the cut and the final product:</p> The video is not supported in your browser. <p></p>"},{"location":"projects/final-project/#acrylic-inlay","title":"Acrylic Inlay","text":"<p>I planned to use the laser cutter to cut the acrylic inlay of Guam. I had a limited amount of green acrylic to cut, so I needed to make some test cuts to ensure that it would actually fit well.</p> <p>I started by cutting the same vector used for the outside of the Guam pocket but with a 1 mm offset inward. This would hopefully give the cut enough room to fit inside of the cutout. I also used cardboard (which was 1/4\u201d) since I did not want to unnecessarily use any acrylic.</p> <p>My lab\u2019s laser cutter has some preset settings for speed, power, and frequency for different materials and types of cuts, so I set it to a cardboard vector cut.</p> <p>Here is the cardboard cutout in the wood. As you can see, it fit almost perfectly, but a sharp part at the left side of the cutout did not exactly fit. This was likely because a 1/8\u201d bit was not precise enough to accurately cut that section in the wood. Also note that the cardboard did stick out of the wood slightly due to it being 1/4\u201d rather than 1/8\u201d.</p> <p>Here is the cardboard inside of the wood:</p> <p></p> <p></p> <p>I adjusted that part of the vector and re-cut on cardboard, which worked fine. I then moved onto cutting a test piece of acrylic.</p> <p>I changed the settings on the laser cutter for a vector cut on the acrylic, and fit it in the wood cutout again.</p> <p>It was essentially a perfect fit with no visible gaps. Also, it was essentially perfect in terms of depth, with an unnoticeable change in depth from the wood to the acrylic.</p> <p>Here is the acrylic in the wood:</p> <p></p> <p>Finally, I ran the cut with my green sheet of acrylic. I used the same settings as the previous acrylic piece, but I had to run the job two times since it did not look like it cut fully through on the first one.</p> <p>Like the test acrylic, it fit almost perfectly.</p>"},{"location":"projects/final-project/#tle493d-hall-effect-sensor-failed","title":"TLE493D Hall Effect Sensor (Failed)","text":"<p>After trying out step response, I realized that it might not be the best for my project, so I switched back to using a hall effect sensor.</p> <p>I started by using the TLE493D, which is a 3D I2C hall sensor.</p> <p>After looking at the datasheet, I noticed that a custom address or multiple addresses cannot be set to the component, so they cannot all be on the same I2C line. To fix this problem, I decided to use the Arduino TCA9548A Multiplexer, since it is able to handle multiple I2C devices of the same address.</p>"},{"location":"projects/final-project/#getting-one-tle493d-to-work","title":"Getting One TLE493D to Work","text":"<p>This was a fairly simple process, and I referred to the documentation listed in the documentation for the TLE493D library in Arduino.</p> <p>Here is my code segment.</p> <pre><code>#include &lt;Wire.h&gt;\n#include &lt;Tle493d_w2b6.h&gt;\n\nTle493d_w2b6 sensor;\n\nvoid setup() {\n  pinMode(3, OUTPUT);\n\n  Wire.begin();\n  Serial.begin(9600);\n\n  sensor.begin();\n}\n\nvoid loop() {\n  sensor.updateData();\n\n  float x = sensor.getX();\n  float y = sensor.getY();\n  float z = sensor.getZ();\n\n  Serial.print(\"X: \"); Serial.print(x);\n  Serial.print(\", Y: \"); Serial.print(y);\n  Serial.print(\", Z: \"); Serial.println(z);\n\n  delay(100);\n\n  if (abs(x) + abs(y) + abs(z) &gt; 5) digitalWrite(3, HIGH);\n  else digitalWrite(3, LOW);\n}\n</code></pre> <p>This code checks the sensor every 100 milliseconds, and it measures the magnetic force in the three axes. After some experimentation with distances, I decided that adding the magnitudes of the forces for each axis to 5 would produce a reasonable distance from the sensor to trigger the board. This will be changed after the physical board is made.</p> The video is not supported in your browser. <p>Here is the sensor board.</p> <p></p> <p></p>"},{"location":"projects/final-project/#using-the-multiplexer","title":"Using the Multiplexer","text":"<p>Using the multiplexer, I ran into one primary problem. I decided to try it out with a single Hall Effect sensor to see if that would work, but it only worked partially. When getting input from the sensor after connecting it to the multiplexer, only the X reading seemed to change as the magnet changed its distance, while the other values remained at -0.13.</p> <p>The multiplexer was connected via 5V power, ground, SDA, and SCL to a Xiao RP2040. The TLE493D sensor I was testing was connected to the same power and ground, and to the 0th SDA and SCL line on the TCA9548A multiplexer.</p> The video is not supported in your browser. <pre><code>#include &lt;Wire.h&gt;\n#include &lt;Tle493d_w2b6.h&gt;\n\n#define TCA9548A_ADDRESS 0x70\n\nconst int NUM_SENSORS = 1;\n\nTle493d_w2b6 sensors[NUM_SENSORS];\n\nvoid tcaSelect(uint8_t i) {\n  Wire.beginTransmission(TCA9548A_ADDRESS);\n  Wire.write(1 &lt;&lt; i);\n  Wire.endTransmission();\n}\n\nvoid setup() {\n  Wire.begin();\n  Serial.begin(9600);\n\n  for (int i = 0; i &lt; NUM_SENSORS; i++) {\n    tcaSelect(i);\n    sensors[i].begin();\n  }\n}\n\nvoid loop() {\n  for (int i = 0; i &lt; NUM_SENSORS; i++) {\n    tcaSelect(i);\n    sensors[i].updateData();\n\n    float x = sensors[i].getX();\n    float y = sensors[i].getY();\n    float z = sensors[i].getZ();\n\n    Serial.print(\"Sensor \"); Serial.print(i + 1);\n    Serial.print(\": X = \"); Serial.print(x); \n    Serial.print(\", Y = \"); Serial.print(y); \n    Serial.print(\", Z = \"); Serial.println(z);\n  }\n\n  delay(100);\n}\n</code></pre>"},{"location":"projects/final-project/#troubleshooting","title":"Troubleshooting","text":"<p>I talked to Dr. Adam Harris, who helped me figure out why many of the problems were happening for this sensor. We tried to manipulate the TLE493D library, use generic sensor objects, and tried to directly write to addresses and read them with Wire, but none of these seemed to work.</p> <p>I also learned how to use a very important tool for analyzing problems with I2C or any other networking protocol: a logic analyzer.</p> <p>Here is a picture of the logic analyzer monitoring the I2C line. As shown in the image, the master device writes the message requesting data from the TLE493D successfully, and the sensor correctly sends one of the bytes of data successfully. However, the other bytes necessary do not seem to be sent.</p> <p></p> <p>In the datasheet for the TLE493D, each of the three dimensions have 12 bits, split into two bytes. The first byte contains the first 8 bits in the string, and the last four digits of the second byte have the other 4 bits. Thus, this explains why the X axis was somewhat accurate in measuring, while the other dimensions failed to measure anything. The first 8 bits of the X data were being transferred, but none of the other data was actually transferred successfully.</p> <p>Though this problem could not be solved in time, the logic analyzer helped to show the underlying problem.</p>"},{"location":"projects/final-project/#ss49e-hall-effect-sensor","title":"SS49E Hall Effect Sensor","text":"<p>After being unable to solve the problems with the TLE493D, I tried out another hall sensor: the SS49E linear hall sensor. This sensor did not require I2C, but instead directly connected to a GPIO pin, power, and ground. </p> <p>Since it only required these three connections, I made small PCBs for each of the sensors (so that they could be spread out) that connected each of the leads to one female header.</p> <p>Here is the PCB design. Note that on the actual board, I replaced one of the headers with the SS49E. There are no footprints of the sensor because it is a through-hole component which I adapted to allow me to treat it as surface mount (by shortening the leads).</p> <p></p> <p>Programming the sensors was fairly easy. I simply had to perform an analog read on the pin which the sensor was connected to, and it would output a value. Then, based on that value and how it was affected when I placed a magnet on it, I modified the output value to match an approximate linear scale. Since the analog read seemed to have a maximum value of 255, it rounded over whenever the given value was greater than it. Thus, I had to use modulo and some displacement to create an accurate measurement, which you can view in the \u201cFinal Code\u201d section.</p> <p>I did eventually realize that I had accidentally used two digital pins to connect to some of my sensors, but since I had already made my main board, I decided to simply reduce the amount of sensors by two (leaving 4 sensors in total).</p>"},{"location":"projects/final-project/#tft-screen","title":"TFT Screen","text":""},{"location":"projects/final-project/#general-programming","title":"General Programming","text":"<p>Programming the TFT screen was quite simple. I used a 4.0\u201d TFT SPI Module with an ST7796 driver. Most screens I found were specifically made for the Arduino Mega 2560, but this screen seemed not to need one. I would prefer to use a chip with less pins and memory, such as the Xiao RP2040.</p> <p>When searching for libraries compatible with the driver, I was able to find the Adafruit ST7796S_kbv library.</p> <p>I tried running one of the example code segments, and the screen worked very well. Note that I did this with the Xiao RP2040.</p> <p>However, the bitmaps which were displayed had been manually inserted as 16-bit integer array. I wanted my screen to read images from an SD card since this would take up much less memory than inserting many arrays (My images were 460x320 pixels, so this would take up very much memory because it is a colored bitmap). The examples given did not have any interaction with an SD card.</p> <p>Here is a video of the example code:</p> The video is not supported in your browser."},{"location":"projects/final-project/#compatability-with-sd-card","title":"Compatability with SD Card","text":"<p>I was able to find a very helpful article detailing how to show images from an SD card, which can be found here. Since the previously mentioned library is derivative from the Adafruit_GFX library, and the tutorial used Adafruit_GFX, I was able to do the same steps as the tutorial and still have it work with the Adafruit ST7796S_kbv library.</p> <p>Here is a picture of the screen showing an SD card image:</p> <p></p> <p>You can find the code used in the \u201cFinal Code\u201d section.</p>"},{"location":"projects/final-project/#main-board","title":"Main Board","text":""},{"location":"projects/final-project/#networking","title":"Networking","text":"<p>After testing each of the individual components, I realized that I would not have enough pins on the Xiao RP2040 to connect each of the sensors since the SPI connection to the screen took up 4 pins (note: this was when I planned to have 8 sensors). To solve this, I made an I2C connection from the Xiao to an ATTiny1614. Since the 1614 had many pins, it would work very well for the sensors.</p>"},{"location":"projects/final-project/#routing","title":"Routing","text":"<p>This board was very hard to route due to the various connections that had to be made. I needed to connect the UPDI line, power, and ground to a female header for the ATTiny1614 to allow me to program it. I also needed to connect the MOSI, MISO, SCLK, power, and ground pins to another female header for SPI communication. Along with the SPI lines, I needed to connect separate pins for the screen: DC/RS, RST, and a chip select for the SD card.</p> <p>Here is the final schematic and board design:</p> <p></p> <p></p>"},{"location":"projects/final-project/#milling","title":"Milling","text":"<p>Here is the final board:</p> <p></p> <p></p>"},{"location":"projects/final-project/#final-code","title":"Final Code","text":"<p>Below are my final code segment used to program the Xiao RP2040 and the one to program the ATTiny1614</p> <p>Xiao RP2040:</p> <pre><code>#include &lt;SPI.h&gt;\n#include &lt;Adafruit_GFX.h&gt;\n#include &lt;SdFat.h&gt;\n#include &lt;Adafruit_ImageReader.h&gt;\n#include \"Adafruit_ST7796S_kbv.h\"\n\nint cs = 0;\nAdafruit_ST7796S_kbv tft(cs, 29, 28);\nSdFat SD;\nAdafruit_ImageReader reader(SD);\n\nbool sensors[4] = {0, 0, 0, 0};\nint ind = 0;\n\n#define BLACK   0x0000\n#define BLUE    0x001F\n#define RED     0xF800\n#define GREEN   0x07E0\n#define CYAN    0x07FF\n#define MAGENTA 0xF81F\n#define YELLOW  0xFFE0\n#define WHITE   0xFFFF\n#define GREY    0x8410\n#define ORANGE  0xE880\n\nvoid setup()\n{\n  Serial.begin(9600);\n  Wire.begin();\n  tft.begin();\n  tft.setRotation(1);\n  tft.fillScreen(BLACK);\n  delay(100);\n  if (!SD.begin(1)) {\n    Serial.println(\"SD card initialization failed!\");\n    return;\n  }\n  Serial.println(\"SD card initialized.\");\n\n  reader.drawBMP(\"test.bmp\", tft, 0, 0);\n  delay(500);\n}\n\nvoid loop()\n{\n  Wire.requestFrom(9, 4);\n  for (int i = 0; i &lt; 4; i++) {\n    int receiveVal = Wire.read();\n    receiveVal = (receiveVal + 15) % 255;\n    Serial.print(i); Serial.print(\": \");\n    Serial.println(receiveVal);\n    if ((receiveVal &gt;= 60 &amp;&amp; receiveVal &lt;= 220 &amp;&amp; (i % 2 == 1)) || (receiveVal &gt; 50 &amp;&amp; i == 0) || ((receiveVal &gt; 150) &amp;&amp; i == 2)) {\n      if (sensors[i] == 0) ind = 0;\n      sensors[i] = 1;\n    } else sensors[i] = 0;\n  }\n  for (int i = 0; i &lt; 4; i++) {\n    if (sensors[i] == 1) {\n      ind = ind % 5 + 1;\n      char fileName[10];\n      char sensorLetter = 'A' + i;\n      sprintf(fileName, \"%c%d.bmp\", sensorLetter, ind);\n      Serial.print(\"Loading image: \");\n      Serial.println(fileName);\n      reader.drawBMP(fileName, tft, 0, 0);\n    }\n    if (ind == 1) {\n      delay(500);\n    } else {\n      delay(500);\n    }\n    continue;\n  }\n}\n</code></pre> <p>ATTiny1614:</p> <pre><code>#include &lt;Wire.h&gt;\n\nvoid setup() {\n  // put your setup code here, to run once:\n  Wire.begin(9);\n  Wire.onRequest(sendData);\n  pinMode(0, INPUT);\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n}\n\nvoid sendData()\n{\n  for (int i = 0; i &lt; 4; i++) {\n    int readValue = analogRead(i);\n    Wire.write(readValue);\n  }\n}\n</code></pre> <p>Note that I ended up using 4 sensors.</p>"},{"location":"projects/final-project/#assembly","title":"Assembly","text":"<p>After getting the individual components to work, I assembled them together.</p>"},{"location":"projects/final-project/#top-of-box","title":"Top of Box","text":"<p>I wanted to place the stickers for the names of each location on the top of the box first. I quickly designed the names of the locations in Silhouette Studio, and I cut them using a Cricut vinyl cutter. I then applied transfer tape and placed the stickers on the board.</p> <p>I also laser engraved the project\u2019s title using my lab\u2019s large Epilog laser cutter since there was some free space in the top left of the box.</p> <p>Here is a video of the process:</p> The video is not supported in your browser."},{"location":"projects/final-project/#affixing-electronics","title":"Affixing Electronics","text":"<p>All of the electronics were also affixed to the top of the board since it would be best for if I wanted the top piece to be removable.</p> <p>Although this would likely not work in the long run, I used a fairly strong double-sided tape to affix the sensor boards to the bottom of the acrylic Guam piece. I affixed the bottom sides of the PCBs since those were flat and would therefore stick better. I used more double-sided tape to affix the main PCB to the wood.</p> <p>I used super glue to affix the cutout of Guam to the wood, and I used hot glue to affix the screen to the screen hole.</p> <p>Since the battery pack I used had a velcro strip attached to it, I placed another velcro strip on the wood to hold the battery pack.</p> <p>Everthing seemed to hold well. Here is the final product for the top piece of the box:</p> <p></p> <p></p> <p>The sides and bottom of the box were simply glued together.</p>"},{"location":"projects/final-project/#final-working-product","title":"Final Working Product","text":"The video is not supported in your browser."}]}