{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#connor-cruz-digital-portfolio","title":"Connor Cruz Digital Portfolio","text":"<p>Welcome to my site!</p>"},{"location":"#about-me","title":"About Me","text":"<p>Hello. I am Connor Cruz! </p> <p>I love mathematics, and I spend much of my free time applying these in fun personal projects. Recently, I have been learning some abstract algebra, and I hope to use that to gain understanding in Galois Theory eventually. I have previously studied G\u00f6del\u2019s Incompleteness Theorems using Smullyan, and I have also learned a small amount of Real Analysis.</p> <p>I also really love programming! Since a very young age, I have always been fascinated about how video games and general computer programs were made. I started attempting game development at roughly 6 years old and primarily used JavaScript at 10. From then, I have learned C++ and C# for Unity, as well as Java for general use. I also wish to learn Godot as an alternative to Unity, and I want to learn Rust due to its future promise.</p>"},{"location":"#super-ultimate-tic-tac-toe","title":"Super Ultimate Tic-Tac-Toe","text":"<p>You can find this project here.</p> <p>Do you ever think that traditional tic-tac-toe is boring and that you already know everything that it has in store? Then this game is perfect for you! It takes traditional tic-tac-toe and extends it into 2 extra dimensions, placing a mini tic-tac-toe board in each individual square. Depending on the square where the player places a marker in a mini board, the next player must place their marker in the corresponding square in the large board to the mini board. Have fun strategizing! Any conjectures?</p>"},{"location":"#memory-app-for-dementia","title":"Memory App for Dementia","text":"<p>You can find this project here. INSERT DETAILS</p>"},{"location":"dementia-app/weekly-progress/","title":"Weekly Progress","text":"<p>This section details my weekly progress on my app for those with dementia.</p>"},{"location":"dementia-app/weekly-progress/#99-913","title":"9/9 - 9/13","text":""},{"location":"dementia-app/weekly-progress/#general-plan","title":"General Plan","text":"<p>For this week, I wanted to develop the basis for my project, the image storing system. Rather than starting directly with that, I decided to implement the card game first so that I could store images best to accomodate for the different activities in the app. </p> <p>Thus, I created the base for a game where cards lay face down and the user selects 2 cards. Each card will have a family member, and the user picks 2 cards. If they match, then the match is collected.</p> <p>Note that I did not fully implement the card game but rather the structure for it and a prototype for the image storing system.</p>"},{"location":"dementia-app/weekly-progress/#cardgame-class","title":"CardGame Class","text":"<p>Much of my work this week was done on the CardGame class, following the general plan. I created a method called \u201cinitializeGame\u201d, which performs the setup for a card game and starts the gameplay loop. Here is a snippet of the code:</p> <pre><code>public void initializeGame() {\n    assignImages();\n    shuffleCards();\n    int attempts = 20;\n    for (int i = 0; i &lt; attempts; i++) {\n        selectTwo();\n    }\n    scan.close();\n}\n</code></pre> <p>The assignImages() method was very hard to make, as I had to mold the image system around that. shuffleCards required simply the Collections.shuffle() method to work, and selectTwo() was fairly easy to make given an ArrayList of cards.</p>"},{"location":"dementia-app/weekly-progress/#card-class","title":"Card Class","text":"<p>I needed to define a Card class so that the ArrayList of cards could store individual objects with an image, the person\u2019s name, and the status of the card being flipped or not.</p> <p>I created a boolean method matches() to return whether the Card has the same person as another. I also used Constructor overloading to make two possible card states: - One constructor takes a BufferedImage for the image, a String for the person\u2019s name, and an int for the card number. This creates a card that can be flipped. - The other constructor takes no argument and is solely for removed cards. This may not be necessary as of now.</p>"},{"location":"dementia-app/weekly-progress/#imagelibrary-class","title":"ImageLibrary Class","text":"<p>The ImageLibrary class is used to read a data file stored locally (to allow for data to be saved over multiple runs of the program) and the ability to read and store images on the computer. In the assignImages() method of ImageLibrary, the data.txt file is read. Note that ImageLibrary has an instance variable people which stores instances of Person. The Person class stores an ArrayList of BufferedImages, where each image for the respective person in data.txt are stored.</p>"},{"location":"dementia-app/weekly-progress/#datatxt","title":"data.txt","text":"<p>data.txt is formatted as follows: - A line for a person\u2019s name is indicated by starting with # - Other lines are the path to an image of that person - The image paths for a person are directly under the heading for that person</p> <p>Note that the user will not have to input this manually, as I will later make a system where images can be input and data.txt can be updated based on the user\u2019s input.</p>"},{"location":"projects/dementia-app/","title":"Memorization App for Those with Dementia","text":""},{"location":"projects/dementia-app/#project-description","title":"Project Description","text":"<p>This project is an app that can be used by those with dementia to help retain their memory and be reminded of family members and daily tasks.</p>"},{"location":"projects/dementia-app/#weekly-progress","title":"Weekly Progress","text":"<p>You can find my weekly progress for this project here.</p>"}]}